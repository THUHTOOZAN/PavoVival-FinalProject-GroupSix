# make a new React app (Vite)
npm create vite@latest pixel-calendar -- --template react
cd pixel-calendar
npm i
npm i firebase

xxxxxxxxxxx


<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pixel Calendar</title>
    <!-- student vibe font: pixel-ish -->
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=VT323&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



xxxxxxx


:root{
  --bg:#0b0b0f;          /* near-black */
  --ink:#e8e8e8;         /* off-white text */
  --grid:#2a2a33;        /* lines */
  --neon:#caffff;        /* neon white-ish cyan */
  --accent:#9efcde;      /* minty neon for hover */
  --danger:#ff5c8a;      /* pinky delete */
}

*{ box-sizing: border-box; }
html,body,#root{ height:100%; }
body{
  margin:0;
  font-family: 'VT323', monospace;
  background: var(--bg);
  color: var(--ink);
}

.app-wrap{
  max-width: 1100px;
  margin: 0 auto;
  padding: 20px;
}

.title{
  font-family: 'Press Start 2P', cursive;
  letter-spacing: 1px;
  font-size: 18px;
  color: var(--neon);
  text-shadow: 0 0 6px var(--neon);
  margin-bottom: 16px;
}

.toolbar{
  display:flex; gap:10px; align-items:center; justify-content:space-between;
  margin-bottom: 16px;
  background: #121219;
  border: 2px solid var(--grid);
  padding: 10px 12px;
  border-radius: 10px;
  box-shadow: 0 0 12px rgba(202,255,255,0.08) inset;
}

.btn{
  background:#151521;
  color:var(--neon);
  border:2px solid var(--grid);
  padding:8px 12px;
  border-radius:8px;
  cursor:pointer;
  font-family:inherit;
  text-transform: uppercase;
  letter-spacing:1px;
}
.btn:hover{ border-color: var(--neon); box-shadow: 0 0 8px var(--neon); }
.btn.danger{ border-color: var(--danger); color: var(--danger); }
.btn.ghost{ background:transparent; }

.month-label{
  font-family: 'Press Start 2P', cursive;
  color: var(--ink);
  font-size:14px;
}

.grid{
  display:grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 8px;
}

.weekday{
  text-align:center; padding:6px 0; color:#a7a7bb; font-size:14px;
  text-transform:uppercase; letter-spacing:1px;
}

.cell{
  min-height: 110px;
  border:2px solid var(--grid);
  background:#121219;
  border-radius:10px;
  padding:6px;
  position:relative;
  transition: border-color .15s, box-shadow .15s;
}
.cell:hover{
  border-color: var(--neon);
  box-shadow:0 0 10px rgba(202,255,255,0.15);
}
.cell.other-month{ opacity:.45; }
.cell .daynum{
  font-size:14px; color:#c9c9df; letter-spacing:1px;
}

.badges{
  margin-top:6px; display:flex; flex-direction:column; gap:6px;
}
.badge{
  display:block; width:100%;
  background: #181828;
  border:1px dashed var(--neon);
  color: var(--ink);
  padding:6px;
  border-radius:6px;
  font-size:14px;
  overflow:hidden; text-overflow:ellipsis; white-space:nowrap;
}

.modal-backdrop{
  position:fixed; inset:0; background:rgba(0,0,0,.6);
  display:flex; align-items:center; justify-content:center;
  z-index:10;
}
.modal{
  width: min(700px, 92vw);
  background:#121219;
  border:2px solid var(--neon);
  border-radius:10px;
  padding:16px;
  box-shadow: 0 0 20px rgba(202,255,255,.15);
}
.modal h3{ margin:0 0 12px 0; color: var(--neon); text-shadow:0 0 6px var(--neon); }

.form-grid{
  display:grid; grid-template-columns: 1fr 1fr; gap:12px;
}
.input, .textarea, .select{
  width:100%;
  background:#0f0f16;
  border:2px solid var(--grid);
  border-radius:8px;
  padding:8px 10px;
  color: var(--ink);
  font-family: inherit;
  letter-spacing: .5px;
}
.textarea{ min-height: 70px; resize: vertical; }
.input:focus, .textarea:focus, .select:focus{
  outline:none; border-color: var(--neon);
  box-shadow: 0 0 8px var(--neon);
}

.split{
  display:flex; gap:10px; align-items:center; justify-content:space-between;
  margin-top:10px;
}
.list{
  margin-top:10px; border-top: 1px dashed var(--grid); padding-top:10px;
}
.item{
  display:flex; align-items:flex-start; justify-content:space-between; gap:10px;
  padding:8px; border:1px solid var(--grid); border-radius:8px; margin-bottom:6px;
}
.item .times{ color:#a7a7bb; font-size:12px; }






xxxxxx


// super basic firebase init. Put your keys below.
// You can also use Vite env vars if you prefer.
import { initializeApp } from "firebase/app";
import { getAuth, signInAnonymously, onAuthStateChanged } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
  apiKey:        "YOUR_API_KEY",
  authDomain:    "YOUR_PROJECT.firebaseapp.com",
  projectId:     "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT.appspot.com",
  messagingSenderId: "YOUR_SENDER_ID",
  appId:         "YOUR_APP_ID",
};

export const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db   = getFirestore(app);

// quick helper: ensure we have a signed-in user (anonymous)
export function ensureAuth() {
  return new Promise((resolve) => {
    onAuthStateChanged(auth, async (u) => {
      if (u) return resolve(u);
      await signInAnonymously(auth);
      // state change fires again with a user
    });
  });
}



xxxxxx



import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./styles.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App/>
  </React.StrictMode>
);



xxxxxx






import React from "react";

// tiny month names because pixel style
const MONTHS = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

export default function MonthNav({ year, month, onPrevMonth, onNextMonth, onPrevYear, onNextYear, onToday }) {
  return (
    <div className="toolbar">
      <div style={{display:'flex', gap:8}}>
        <button className="btn" onClick={onPrevYear}  title="Previous Year">¬´ Year</button>
        <button className="btn" onClick={onPrevMonth} title="Previous Month">‚Äπ Month</button>
      </div>

      <div className="month-label">{MONTHS[month]} {year}</div>

      <div style={{display:'flex', gap:8}}>
        <button className="btn" onClick={onNextMonth} title="Next Month">Month ‚Ä∫</button>
        <button className="btn" onClick={onNextYear}  title="Next Year">Year ¬ª</button>
        <button className="btn ghost" onClick={onToday} title="Jump to today">Today</button>
      </div>
    </div>
  );
}



xxxxxx



import React from "react";

const WD = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];

// quick date helpers (no libs)
function daysInMonth(year, month){ return new Date(year, month+1, 0).getDate(); }
function firstWeekday(year, month){ return new Date(year, month, 1).getDay(); }

export default function CalendarGrid({ year, month, eventsByDate, onClickDay }) {
  const total = daysInMonth(year, month);
  const firstWd = firstWeekday(year, month);

  // We show 6x7 = 42 cells (like most calendars)
  const cells = [];
  // prev month padding
  const prevMonth = month===0?11:month-1;
  const prevYear  = month===0?year-1:year;
  const prevDays  = daysInMonth(prevYear, prevMonth);
  for(let i=0;i<firstWd;i++){
    const day = prevDays-firstWd+i+1;
    const dateStr = `${prevYear}-${String(prevMonth+1).padStart(2,'0')}-${String(day).padStart(2,'0')}`;
    cells.push({ y:prevYear, m:prevMonth, d:day, dateStr, other:true });
  }
  // current month
  for(let d=1; d<=total; d++){
    const dateStr = `${year}-${String(month+1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;
    cells.push({ y:year, m:month, d, dateStr, other:false });
  }
  // next month padding
  const nextCount = 42 - cells.length;
  const nextMonth = month===11?0:month+1;
  const nextYear  = month===11?year+1:year;
  for(let d=1; d<=nextCount; d++){
    const dateStr = `${nextYear}-${String(nextMonth+1).padStart(2,'0')}-${String(d).padStart(2,'0')}`;
    cells.push({ y:nextYear, m:nextMonth, d, dateStr, other:true });
  }

  return (
    <div>
      <div className="grid">
        {WD.map(w => <div className="weekday" key={w}>{w}</div>)}
      </div>
      <div className="grid">
        {cells.map(cell=>{
          const evts = eventsByDate[cell.dateStr] || [];
          return (
            <button
              key={cell.dateStr}
              className={`cell ${cell.other?'other-month':''}`}
              onClick={()=>onClickDay(cell.dateStr)}
              title={`Add / view events for ${cell.dateStr}`}
            >
              <div className="daynum">{cell.d}</div>
              <div className="badges">
                {evts.slice(0,3).map(e=>(
                  <span key={e.id} className="badge">
                    {e.startTime ? `[${e.startTime}] ` : ''}{e.title}
                  </span>
                ))}
                {evts.length>3 && <span className="badge">+{evts.length-3} more‚Ä¶</span>}
              </div>
            </button>
          );
        })}
      </div>
    </div>
  );
}


xxxxxxx


import React, { useEffect, useMemo, useState } from "react";

export default function EventModal({
  date, events, onClose,
  onCreate, onUpdate, onDelete
}){
  const [mode, setMode] = useState("add"); // 'add' | 'edit'
  const [editId, setEditId] = useState(null);
  const [form, setForm] = useState({
    title: "", startTime: "", endTime: "", notes:""
  });

  // When choosing an event to edit, populate the form
  const startEdit = (evt) => {
    setMode("edit");
    setEditId(evt.id);
    setForm({
      title: evt.title || "",
      startTime: evt.startTime || "",
      endTime: evt.endTime || "",
      notes: evt.notes || "",
    });
  };
  const resetAdd = ()=>{ setMode("add"); setEditId(null); setForm({title:"",startTime:"",endTime:"",notes:""}); };

  const handleSubmit = (e)=>{
    e.preventDefault();
    if (!form.title.trim()) return alert("Title please üôè");

    if (mode==="add"){
      onCreate({
        date,
        ...form,
      });
      resetAdd();
    } else {
      onUpdate(editId, { ...form });
    }
  };

  const handleDelete = (id) => {
    if (confirm("Delete this event?")) onDelete(id);
  };

  const sorted = useMemo(()=>{
    const copy = [...(events||[])];
    copy.sort((a,b)=>(a.startTime||"").localeCompare(b.startTime||""));
    return copy;
  },[events]);

  return (
    <div className="modal-backdrop" onClick={onClose}>
      <div className="modal" onClick={e=>e.stopPropagation()}>
        <h3>Events ‚Äî {date}</h3>

        <form onSubmit={handleSubmit} className="form-grid">
          <div>
            <label>Title</label>
            <input className="input" value={form.title}
              onChange={e=>setForm(f=>({...f,title:e.target.value}))} placeholder="Lab, meetup, homework..." />
          </div>
          <div>
            <label>Start</label>
            <input className="input" type="time" value={form.startTime}
              onChange={e=>setForm(f=>({...f,startTime:e.target.value}))}/>
          </div>
          <div>
            <label>End</label>
            <input className="input" type="time" value={form.endTime}
              onChange={e=>setForm(f=>({...f,endTime:e.target.value}))}/>
          </div>
          <div style={{gridColumn:'1 / span 2'}}>
            <label>Notes</label>
            <textarea className="textarea" value={form.notes}
              onChange={e=>setForm(f=>({...f,notes:e.target.value}))} placeholder="room, link, who brings snacks" />
          </div>

          <div style={{gridColumn:'1 / span 2'}} className="split">
            <div style={{display:'flex', gap:8}}>
              <button className="btn" type="submit">{mode==="add"?"Add":"Save"}</button>
              {mode==="edit" && <button type="button" className="btn ghost" onClick={resetAdd}>+ New</button>}
            </div>
            <button className="btn" type="button" onClick={onClose}>Close</button>
          </div>
        </form>

        <div className="list">
          {sorted.length===0 && <div style={{opacity:.7}}>No events yet. Add something ‚Üë</div>}
          {sorted.map(evt=>(
            <div className="item" key={evt.id}>
              <div>
                <div><b>{evt.title}</b></div>
                <div className="times">{evt.startTime || "‚Äî"} {evt.endTime?`‚Üí ${evt.endTime}`:""}</div>
                {evt.notes && <div style={{opacity:.8, marginTop:4}}>{evt.notes}</div>}
              </div>
              <div style={{display:'flex', gap:8}}>
                <button className="btn" onClick={()=>startEdit(evt)}>Edit</button>
                <button className="btn danger" onClick={()=>handleDelete(evt.id)}>Delete</button>
              </div>
            </div>
          ))}
        </div>

      </div>
    </div>
  );
}


xxxxxxxxx


// WARNING: student-y code with comments (no fancy libs, just react + firebase)
import React, { useEffect, useMemo, useState } from "react";
import { db, ensureAuth, auth } from "./firebase";
import {
  collection, addDoc, updateDoc, deleteDoc, doc,
  query, where, orderBy, onSnapshot, serverTimestamp
} from "firebase/firestore";

import MonthNav from "./components/MonthNav";
import CalendarGrid from "./components/CalendarGrid";
import EventModal from "./components/EventModal";

// helper: yyyy-mm-dd for Date obj
function ymd(d){
  return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}-${String(d.getDate()).padStart(2,'0')}`;
}
function monthStartStr(y,m){ return `${y}-${String(m+1).padStart(2,'0')}-01`; }
function monthEndStr(y,m){ const last = new Date(y,m+1,0).getDate(); return `${y}-${String(m+1).padStart(2,'0')}-${String(last).padStart(2,'0')}`; }

export default function App(){
  const today = new Date();
  const [viewYear, setViewYear] = useState(today.getFullYear());
  const [viewMonth, setViewMonth] = useState(today.getMonth()); // 0..11
  const [uid, setUid] = useState(null);
  const [monthEvents, setMonthEvents] = useState([]); // events of the visible month
  const [selectedDate, setSelectedDate] = useState(null);
  const [showModal, setShowModal] = useState(false);

  // 1) ensure an anonymous signed-in user so every student can have private data
  useEffect(()=>{
    ensureAuth().then(u=> setUid(u.uid));
  },[]);

  // 2) listen to events in the visible month
  useEffect(()=>{
    if (!uid) return;
    const start = monthStartStr(viewYear, viewMonth);
    const end   = monthEndStr(viewYear, viewMonth);

    // simple range by 'date' string (YYYY-MM-DD) + owner filter
    // NOTE: orderBy('date') needed for range queries
    const qRef = query(
      collection(db, "events"),
      where("uid", "==", uid),
      where("date", ">=", start),
      where("date", "<=", end),
      orderBy("date","asc")
    );

    const unsub = onSnapshot(qRef, (snap)=>{
      const rows = snap.docs.map(d=>({ id:d.id, ...d.data() }));
      setMonthEvents(rows);
    });

    return unsub;
  },[uid, viewYear, viewMonth]);

  // 3) pre-group by date for fast display
  const eventsByDate = useMemo(()=>{
    const map = {};
    for(const e of monthEvents){
      if(!map[e.date]) map[e.date]=[];
      map[e.date].push(e);
    }
    // simple sort inside days
    for(const k of Object.keys(map)){
      map[k].sort((a,b)=>(a.startTime||"").localeCompare(b.startTime||""));
    }
    return map;
  },[monthEvents]);

  // open modal for day
  function openDay(dateStr){
    setSelectedDate(dateStr);
    setShowModal(true);
  }

  // 4) CRUD operations (Firestore)
  async function createEvent(e){
    // minimal required fields
    const payload = {
      uid,
      date: e.date, // YYYY-MM-DD
      title: e.title,
      startTime: e.startTime || "",
      endTime: e.endTime || "",
      notes: e.notes || "",
      createdAt: serverTimestamp(),
    };
    await addDoc(collection(db,"events"), payload);
  }
  async function updateEvent(id, patch){
    await updateDoc(doc(db,"events", id), { ...patch });
  }
  async function deleteEvent(id){
    await deleteDoc(doc(db,"events", id));
  }

  // navigation actions
  function prevMonth(){
    const m = viewMonth===0?11:viewMonth-1;
    const y = viewMonth===0?viewYear-1:viewYear;
    setViewMonth(m); setViewYear(y);
  }
  function nextMonth(){
    const m = viewMonth===11?0:viewMonth+1;
    const y = viewMonth===11?viewYear+1:viewYear;
    setViewMonth(m); setViewYear(y);
  }
  function prevYear(){ setViewYear(y=>y-1); }
  function nextYear(){ setViewYear(y=>y+1); }
  function goToday(){
    const t=new Date();
    setViewYear(t.getFullYear()); setViewMonth(t.getMonth());
    setSelectedDate(ymd(t));
  }

  return (
    <div className="app-wrap">
      <div className="title">PIXEL CALENDAR</div>

      <MonthNav
        year={viewYear} month={viewMonth}
        onPrevMonth={prevMonth} onNextMonth={nextMonth}
        onPrevYear={prevYear} onNextYear={nextYear}
        onToday={goToday}
      />

      <CalendarGrid
        year={viewYear}
        month={viewMonth}
        eventsByDate={eventsByDate}
        onClickDay={openDay}
      />

      {showModal && selectedDate && (
        <EventModal
          date={selectedDate}
          events={eventsByDate[selectedDate] || []}
          onClose={()=>setShowModal(false)}
          onCreate={createEvent}
          onUpdate={updateEvent}
          onDelete={deleteEvent}
        />
      )}
    </div>
  );
}


xxxxxxxx



// Firestore rules
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isSignedIn() { return request.auth != null; }
    function isOwner(data) { return isSignedIn() && data.uid == request.auth.uid; }

    match /events/{id} {
      allow read, create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data);
    }
  }
}


xxxxxxx







