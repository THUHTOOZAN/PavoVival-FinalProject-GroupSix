// src/pages/ProfilePage.js
import React, { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { db } from "../firebase";
import {
  collection,
  doc,
  getDoc,
  onSnapshot,
  query,
  where,
} from "firebase/firestore";

/* -------- helpers -------- */
const toMillis = (ts) => {
  if (!ts) return 0;
  // Firestore Timestamp -> ms
  if (typeof ts.toMillis === "function") return ts.toMillis();
  // JS Date
  if (ts instanceof Date) return ts.getTime();
  // string/number fallback
  const n = Number(ts);
  return Number.isFinite(n) ? n : 0;
};

// find a usable image URL across many shapes
function pickThumb(p) {
  // simple direct fields
  for (const k of ["imageUrl", "imageURL", "image", "photo", "thumbnail", "firstImage"]) {
    if (p[k]) return p[k];
  }
  // array forms
  if (Array.isArray(p.images) && p.images.length) {
    // images can be ["url", ...] or [{url: ...}, ...]
    const first = p.images[0];
    if (typeof first === "string") return first;
    if (first && typeof first === "object" && first.url) return first.url;
  }
  if (Array.isArray(p.media) && p.media.length) {
    const first = p.media[0];
    if (typeof first === "string") return first;
    if (first && typeof first === "object" && first.url) return first.url;
  }
  return null;
}

/* -------- simple modal -------- */
function PostModal({ post, onClose }) {
  if (!post) return null;
  const image = pickThumb(post);
  return (
    <div
      className="fixed inset-0 z-50 bg-black/70 flex items-center justify-center"
      onClick={onClose}
    >
      <div
        className="bg-white rounded-2xl p-4 w-[95vw] max-w-3xl"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            {image ? (
              <img
                src={image}
                alt="post"
                className="w-full max-h-[70vh] object-contain rounded-xl"
              />
            ) : (
              <div className="w-full aspect-square bg-gray-100 rounded-xl" />
            )}
          </div>
          <div className="md:w-64">
            <h3 className="font-semibold text-[#8B6F47] mb-2">Caption</h3>
            <p className="text-sm text-[#8B6F47]/80 whitespace-pre-wrap">
              {post.text || post.caption || "—"}
            </p>
          </div>
        </div>
        <button
          className="mt-4 px-4 py-2 rounded-xl bg-[#E2B887] text-white"
          onClick={onClose}
        >
          Close
        </button>
      </div>
    </div>
  );
}

export default function ProfilePage() {
  const { user } = useAuth();
  const [profile, setProfile] = useState(null); // users/{uid}
  const [posts, setPosts] = useState([]);       // my posts
  const [openPost, setOpenPost] = useState(null);

  // Load profile doc once
  useEffect(() => {
    if (!user) return;
    (async () => {
      const s = await getDoc(doc(db, "users", user.uid));
      setProfile(s.exists() ? s.data() : {});
    })();
  }, [user]);

  // Live query: posts where uid == me (NO orderBy —> no index required)
  useEffect(() => {
    if (!user) return;
    const q = query(collection(db, "posts"), where("uid", "==", user.uid));
    const unsub = onSnapshot(
      q,
      (snap) => {
        const list = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
        // sort client-side by createdAt desc if available
        list.sort(
          (a, b) => toMillis(b.createdAt) - toMillis(a.createdAt)
        );
        setPosts(list);
      },
      (err) => {
        console.error("posts query error:", err);
        setPosts([]); // show empty state if query fails
      }
    );
    return unsub;
  }, [user]);

  // derived display
  const displayName = useMemo(
    () => profile?.displayName || user?.displayName || "Pet Lover",
    [profile, user]
  );
  const photoURL = useMemo(
    () => profile?.photoURL || user?.photoURL || "https://i.pravatar.cc/120?img=8",
    [profile, user]
  );
  const bio = profile?.bio || "";

  if (!user) {
    return (
      <div className="min-h-[calc(100vh-80px)] flex items-center justify-center text-[#8B6F47]">
        Sign in to see your profile.
      </div>
    );
  }

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC]">
      {/* Header */}
      <div className="max-w-5xl mx-auto px-4 py-6">
        <div className="bg-white/90 rounded-2xl shadow p-6 flex items-center gap-6">
          <img
            src={photoURL}
            alt="avatar"
            className="w-24 h-24 rounded-full object-cover"
          />
          <div className="flex-1">
            {/* name + small buttons row */}
            <div className="flex flex-wrap items-center gap-3">
              <h1 className="text-2xl font-bold text-[#8B6F47]">{displayName}</h1>

              <a
                href="/add"
                className="px-3 py-1 rounded-full text-sm bg-[#E2B887] text-white hover:brightness-95"
              >
                Create post
              </a>
              <a
                href="/chat"
                className="px-3 py-1 rounded-full text-sm border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF1DF]"
              >
                Message
              </a>
              <a
                href="/settings"
                className="px-3 py-1 rounded-full text-sm border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF1DF]"
              >
                Edit profile
              </a>
            </div>

            {/* stats under name */}
            <div className="mt-1 flex gap-6 text-[#8B6F47]">
              <span>{posts.length} posts</span>
              <span>0 followers</span>
              <span>0 following</span>
            </div>

            {/* bio */}
            <div className="mt-2 text-[#8B6F47]/80">
              {bio ? (
                <p className="whitespace-pre-wrap">{bio}</p>
              ) : (
                <a href="/settings" className="underline">Add bio</a>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Grid */}
      <div className="max-w-5xl mx-auto px-4 pb-12">
        {posts.length === 0 ? (
          <div className="text-center text-[#8B6F47]/70">No posts yet.</div>
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {posts.map((p) => {
              const src = pickThumb(p);
              return (
                <button
                  key={p.id}
                  onClick={() => setOpenPost(p)}
                  className="aspect-square bg-white/70 rounded-2xl overflow-hidden hover:opacity-90"
                  title="Open post"
                >
                  {src ? (
                    <img src={src} alt="post" className="w-full h-full object-cover" />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-[#8B6F47]/50">
                      post
                    </div>
                  )}
                </button>
              );
            })}
          </div>
        )}
      </div>

      <PostModal post={openPost} onClose={() => setOpenPost(null)} />
    </div>
  );
}