// src/pages/ProfilePage.js
import React, { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  orderBy,
  query,
} from "firebase/firestore";

/* ---------- helpers: find an image URL in many possible shapes ---------- */
const looksLikeImgUrl = (s) =>
  typeof s === "string" &&
  (s.startsWith("http") ||
    s.startsWith("data:image") ||
    s.startsWith("blob:")) &&
  /\.(png|jpe?g|gif|webp|avif)(\?.*)?$/i.test(s);

function firstUrlIn(val) {
  if (!val) return null;
  if (typeof val === "string" && looksLikeImgUrl(val)) return val;
  if (Array.isArray(val)) {
    for (const item of val) {
      const u = firstUrlIn(item);
      if (u) return u;
    }
  } else if (typeof val === "object") {
    for (const v of Object.values(val)) {
      const u = firstUrlIn(v);
      if (u) return u;
    }
  }
  return null;
}

function pickThumb(p) {
  // common flat fields
  for (const k of [
    "imageUrl",
    "imageURL",
    "image",
    "photo",
    "thumbnail",
    "url",
    "src",
  ]) {
    if (p[k] && looksLikeImgUrl(p[k])) return p[k];
  }
  // common arrays/objects
  if (Array.isArray(p.images) && p.images.length) {
    const u = firstUrlIn(p.images[0]);
    if (u) return u;
  }
  if (Array.isArray(p.media) && p.media.length) {
    const u = firstUrlIn(p.media[0]);
    if (u) return u;
  }
  // last resort: scan whole object
  return firstUrlIn(p);
}

export default function ProfilePage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  const [me, setMe] = useState(null);     // users/{uid}
  const [posts, setPosts] = useState([]); // full posts

  useEffect(() => {
    if (!user) return;

    (async () => {
      // ---- Profile (from Firestore)
      const uSnap = await getDoc(doc(db, "users", user.uid));
      if (uSnap.exists()) {
        setMe(uSnap.data());
      } else {
        setMe({
          displayName: user.displayName || "My profile",
          photoURL: user.photoURL || "",
          bio: "",
          followersCount: 0,
          followingCount: 0,
        });
      }

      // ---- Post index -> fetch posts
      const q = query(
        collection(db, "users", user.uid, "posts"),
        orderBy("createdAt", "desc")
      );
      const idx = await getDocs(q);
      const ids = idx.docs.map((d) => d.id);
      const full = await Promise.all(ids.map((id) => getDoc(doc(db, "posts", id))));
      setPosts(full.filter((s) => s.exists()).map((s) => ({ id: s.id, ...s.data() })));
    })();
  }, [user]);

  const stats = useMemo(
    () => ({
      posts: posts.length,
      followers: me?.followersCount ?? 0,
      following: me?.followingCount ?? 0,
    }),
    [posts.length, me]
  );

  if (!user) return null;

  return (
    <div className="max-w-5xl mx-auto">
      {/* ===== Header card ===== */}
      <section className="bg-white/90 rounded-2xl shadow p-6 md:p-8 mb-6">
        <div className="flex gap-6 md:gap-8">
          {/* avatar */}
          <img
            src={me?.photoURL || "https://i.pravatar.cc/128?img=7"}
            alt="avatar"
            className="w-24 h-24 md:w-28 md:h-28 rounded-full object-cover ring-2 ring-[#E2B887]/50"
          />

          {/* name + stats + bio */}
          <div className="flex-1 min-w-0">
            {/* name */}
            <div className="flex items-start justify-between gap-4">
              <div className="min-w-0">
                <h1 className="text-2xl md:text-3xl font-bold text-[#8B6F47] truncate">
                  {me?.displayName || "Your profile"}
                </h1>
                {/* stats directly under the name */}
                <ul className="mt-2 flex gap-6 text-[#8B6F47]">
                  <li>
                    <span className="font-semibold">{stats.posts}</span>{" "}
                    <span className="opacity-70">posts</span>
                  </li>
                  <li>
                    <span className="font-semibold">{stats.followers}</span>{" "}
                    <span className="opacity-70">followers</span>
                  </li>
                  <li>
                    <span className="font-semibold">{stats.following}</span>{" "}
                    <span className="opacity-70">following</span>
                  </li>
                </ul>
              </div>

              {/* small buttons on the right */}
              <div className="flex flex-col gap-2 items-stretch md:min-w-[160px] sm:flex-row sm:gap-2 md:flex-col">
                <button
                  onClick={() => navigate("/add")}
                  className="px-3 py-1.5 rounded-lg bg-[#E2B887] text-white text-sm hover:brightness-95"
                >
                  Create post
                </button>
                <button
                  onClick={() => navigate("/chat")}
                  className="px-3 py-1.5 rounded-lg bg-white text-[#8B6F47] text-sm border border-[#E2B887]/50 hover:bg-[#FFF8EF]"
                >
                  Message
                </button>
                <button
                  onClick={() => navigate("/settings")}
                  className="px-3 py-1.5 rounded-lg bg-[#FFE7CC] text-[#8B6F47] text-sm border border-[#E2B887]/50 hover:bg-[#FFF2E1]"
                >
                  Edit profile
                </button>
              </div>
            </div>

            {/* bio (no email) */}
            <div className="mt-3 text-[#6f5a36]">
              {me?.bio ? (
                <p className="whitespace-pre-line">{me.bio}</p>
              ) : (
                <button
                  onClick={() => navigate("/settings")}
                  className="text-[#8B6F47] underline underline-offset-2"
                  title="Add a short bio in Settings"
                >
                  Add short bio
                </button>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* ===== Posts grid ===== */}
      {posts.length === 0 ? (
        <div className="text-center text-[#8B6F47]/60">
          No posts yet. Tap <b>+</b> to create one.
        </div>
      ) : (
        <section className="grid grid-cols-3 gap-2 md:gap-4">
          {posts.map((p) => {
            const src = pickThumb(p);
            return (
              <div
                key={p.id}
                className="relative aspect-square overflow-hidden rounded-lg bg-white/70 ring-1 ring-[#E2B887]/30"
                title={p.text || "post"}
              >
                {src ? (
                  <img
                    src={src}
                    alt="post"
                    loading="lazy"
                    className="w-full h-full object-cover hover:scale-105 transition-transform"
                    onError={(e) => {
                      e.currentTarget.style.opacity = 0.2;
                    }}
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-[#8B6F47]/60 p-3 text-center">
                    {p.text?.slice(0, 40) || "Text post"}
                  </div>
                )}
              </div>
            );
          })}
        </section>
      )}
    </div>
  );
}