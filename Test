// src/pages/AddPostPage.js
import React, { useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { db, storage } from "../firebase";
import {
  addDoc,
  collection,
  doc,
  serverTimestamp,
  setDoc,
  updateDoc,
} from "firebase/firestore";
import { ref as sref, uploadBytes, getDownloadURL } from "firebase/storage";
import { Image as ImageIcon, X, Loader2 } from "lucide-react";

// small helper to format bytes
const kb = (n) => `${Math.round(n / 1024)} KB`;

export default function AddPostPage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  // form state
  const [caption, setCaption] = useState("");
  const [files, setFiles] = useState([]);         // File[]
  const [previews, setPreviews] = useState([]);   // [{id, url, name, size}]
  const [error, setError] = useState("");
  const [posting, setPosting] = useState(false);

  const canPost = useMemo(
    () => files.length > 0 || caption.trim().length > 0,
    [files, caption]
  );

  function onPickFiles(e) {
    setError("");
    const picked = Array.from(e.target.files || []);
    if (!picked.length) return;

    const all = [...files, ...picked];
    if (all.length > 10) {
      setError("You can attach up to 10 images.");
    }
    const trimmed = all.slice(0, 10);

    setFiles(trimmed);

    // refresh previews
    const nextPreviews = trimmed.map((f, idx) => ({
      id: `${idx}-${f.name}`,
      url: URL.createObjectURL(f),
      name: f.name,
      size: f.size,
    }));
    // revoke old URLs
    previews.forEach((p) => URL.revokeObjectURL(p.url));
    setPreviews(nextPreviews);

    // reset file input so picking the same file again still triggers change
    e.target.value = "";
  }

  function removeOne(id) {
    const idx = previews.findIndex((p) => p.id === id);
    if (idx === -1) return;
    URL.revokeObjectURL(previews[idx].url);
    const nextPreviews = previews.filter((p) => p.id !== id);
    const nextFiles = files.filter((_, i) => i !== idx);
    setPreviews(nextPreviews);
    setFiles(nextFiles);
  }

  async function onSubmit(e) {
    e.preventDefault();
    if (!user) return;
    if (!canPost) {
      setError("Add a caption or at least one image.");
      return;
    }
    setPosting(true);
    setError("");

    try {
      // 1) Create the post doc first to get postId
      const postRef = await addDoc(collection(db, "posts"), {
        uid: user.uid,
        caption: caption.trim(),
        images: [],                  // we’ll fill after uploads
        createdAt: serverTimestamp(),
        likeCount: 0,
        commentCount: 0,
      });
      const postId = postRef.id;

      // 2) Upload all images (if any) in parallel
      let uploaded = [];
      if (files.length) {
        const uploads = files.map(async (file, i) => {
          // storage path: posts/{uid}/{postId}/{timestamp_index_filename}
          const path = `posts/${user.uid}/${postId}/${Date.now()}_${i}_${file.name}`;
          const r = sref(storage, path);
          await uploadBytes(r, file);
          const url = await getDownloadURL(r);
          return { url, name: file.name, size: file.size };
        });
        uploaded = await Promise.all(uploads);
      }

      // 3) Patch post doc with images array + optional firstImage for quick preview
      await updateDoc(postRef, {
        images: uploaded,                     // [{url, name, size}]
        firstImage: uploaded[0]?.url || null,
      });

      // 4) Add to user’s post index for quick profile listing
      await setDoc(doc(db, "users", user.uid, "posts", postId), {
        postId,
        createdAt: serverTimestamp(),
      });

      // 5) Navigate to profile
      navigate("/profile");
    } catch (err) {
      console.error(err);
      setError(err.message || "Failed to publish post.");
    } finally {
      setPosting(false);
    }
  }

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC] flex justify-center">
      <form
        onSubmit={onSubmit}
        className="w-full max-w-2xl bg-white/90 rounded-2xl shadow-lg p-6 m-6"
      >
        <h2 className="text-2xl font-bold text-[#8B6F47] mb-4">Create Post</h2>

        {/* CAPTION */}
        <textarea
          value={caption}
          onChange={(e) => setCaption(e.target.value)}
          rows={3}
          placeholder="Say something about your pet..."
          className="w-full px-4 py-3 border-2 border-[#E2B887]/40 rounded-xl focus:outline-none focus:border-[#E2B887] bg-white/80 mb-4"
        />

        {/* PICKER */}
        <div className="mb-4">
          <label
            htmlFor="post-files"
            className="inline-flex items-center gap-2 px-4 py-2 rounded-xl border border-[#E2B887]/60 text-[#8B6F47] bg-[#FFF6EA] cursor-pointer hover:bg-[#FFF0D9] transition"
          >
            <ImageIcon className="w-5 h-5" />
            Add images (max 10)
          </label>
          <input
            id="post-files"
            type="file"
            accept="image/*"
            multiple
            className="hidden"
            onChange={onPickFiles}
          />
        </div>

        {/* PREVIEWS GRID */}
        {previews.length > 0 && (
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mb-4">
            {previews.map((p) => (
              <div
                key={p.id}
                className="relative rounded-xl overflow-hidden bg-[#F8F8F8] border"
              >
                <img src={p.url} alt={p.name} className="w-full h-40 object-cover" />
                <button
                  type="button"
                  onClick={() => removeOne(p.id)}
                  className="absolute top-1 right-1 bg-white/90 text-[#8B6F47] p-1 rounded-full shadow hover:bg-white"
                  title="Remove"
                >
                  <X className="w-4 h-4" />
                </button>
                <div className="absolute bottom-0 inset-x-0 bg-black/40 text-white text-[11px] px-2 py-1">
                  {p.name} • {kb(p.size)}
                </div>
              </div>
            ))}
          </div>
        )}

        {/* ERRORS */}
        {error && (
          <div className="mb-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-xl px-4 py-2">
            {error}
          </div>
        )}

        {/* SUBMIT */}
        <button
          type="submit"
          disabled={!canPost || posting}
          className="w-full flex items-center justify-center gap-2 bg-gradient-to-r from-[#E2B887] to-[#B5EAD7] text-white py-3 rounded-xl font-semibold disabled:opacity-50"
        >
          {posting && <Loader2 className="w-5 h-5 animate-spin" />}
          {posting ? "Posting..." : "Post"}
        </button>
      </form>
    </div>
  );
}