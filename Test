// src/pages/ProfilePage.js
import React, { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { db } from "../firebase";
import {
  collection,
  doc,
  onSnapshot,
  orderBy,
  query,
  where,
  getDoc,
} from "firebase/firestore";

/* Lightweight modal to open a post */
function PostModal({ post, onClose }) {
  if (!post) return null;
  return (
    <div className="fixed inset-0 z-50 bg-black/70 flex items-center justify-center" onClick={onClose}>
      <div className="bg-white rounded-2xl p-4 w-[95vw] max-w-3xl" onClick={(e) => e.stopPropagation()}>
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            {post.images?.length ? (
              <img
                src={post.images[0]}
                alt="post"
                className="w-full max-h-[70vh] object-contain rounded-xl"
              />
            ) : (
              <div className="w-full aspect-square bg-gray-100 rounded-xl" />
            )}
          </div>
          <div className="md:w-64">
            <h3 className="font-semibold text-[#8B6F47] mb-2">Caption</h3>
            <p className="text-sm text-[#8B6F47]/80 whitespace-pre-wrap">
              {post.text || "—"}
            </p>
          </div>
        </div>
        <button
          className="mt-4 px-4 py-2 rounded-xl bg-[#E2B887] text-white"
          onClick={onClose}
        >
          Close
        </button>
      </div>
    </div>
  );
}

export default function ProfilePage() {
  const { user } = useAuth();
  const [uDoc, setUDoc] = useState(null);     // {displayName, photoURL, bio}
  const [posts, setPosts] = useState([]);     // my posts
  const [openPost, setOpenPost] = useState(null);

  // Load my Firestore user doc once
  useEffect(() => {
    if (!user) return;
    (async () => {
      const snap = await getDoc(doc(db, "users", user.uid));
      setUDoc(snap.exists() ? snap.data() : {});
    })();
  }, [user]);

  // Live query: all posts where uid == me (ordered by createdAt desc)
  useEffect(() => {
    if (!user) return;
    // NOTE: Firestore may ask you to create a composite index for (where+orderBy). Click the link it shows once and you're done.
    const q = query(
      collection(db, "posts"),
      where("uid", "==", user.uid),
      orderBy("createdAt", "desc")
    );
    const unsub = onSnapshot(q, (snap) => {
      const rows = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setPosts(rows);
    });
    return unsub;
  }, [user]);

  const displayName = useMemo(
    () => uDoc?.displayName || user?.displayName || "Pet Lover",
    [uDoc, user]
  );
  const photoURL = useMemo(
    () => uDoc?.photoURL || user?.photoURL || "https://i.pravatar.cc/120?img=8",
    [uDoc, user]
  );
  const bio = uDoc?.bio || "";

  if (!user) {
    return (
      <div className="min-h-[calc(100vh-80px)] flex items-center justify-center text-[#8B6F47]">
        Sign in to see your profile.
      </div>
    );
  }

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC]">
      {/* Header card */}
      <div className="max-w-5xl mx-auto px-4 py-6">
        <div className="bg-white/90 rounded-2xl shadow p-6 flex items-center gap-6">
          <img
            src={photoURL}
            alt="avatar"
            className="w-24 h-24 rounded-full object-cover"
          />
          <div className="flex-1">
            {/* name + small buttons row */}
            <div className="flex flex-wrap items-center gap-3">
              <h1 className="text-2xl font-bold text-[#8B6F47]">{displayName}</h1>

              <a
                href="/add"
                className="px-3 py-1 rounded-full text-sm bg-[#E2B887] text-white hover:brightness-95"
              >
                Create post
              </a>
              <a
                href="/chat"
                className="px-3 py-1 rounded-full text-sm border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF1DF]"
              >
                Message
              </a>
              <a
                href="/settings"
                className="px-3 py-1 rounded-full text-sm border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF1DF]"
              >
                Edit profile
              </a>
            </div>

            {/* stats directly under name */}
            <div className="mt-1 flex gap-6 text-[#8B6F47]">
              <span>{posts.length} posts</span>
              <span>0 followers</span>
              <span>0 following</span>
            </div>

            {/* bio */}
            <div className="mt-2 text-[#8B6F47]/80">
              {bio ? (
                <p className="whitespace-pre-wrap">{bio}</p>
              ) : (
                <a href="/settings" className="underline">Add bio</a>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Posts grid */}
      <div className="max-w-5xl mx-auto px-4 pb-12">
        {posts.length === 0 ? (
          <div className="text-center text-[#8B6F47]/70">No posts yet.</div>
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {posts.map((p) => (
              <button
                key={p.id}
                onClick={() => setOpenPost(p)}
                className="aspect-square bg-white/70 rounded-2xl overflow-hidden hover:opacity-90"
                title="Open post"
              >
                {p.images?.[0] ? (
                  <img
                    src={p.images[0]}
                    alt="post"
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-[#8B6F47]/50">post</div>
                )}
              </button>
            ))}
          </div>
        )}
      </div>

      <PostModal post={openPost} onClose={() => setOpenPost(null)} />
    </div>
  );
}
……..


// src/pages/SettingsPage.js
import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { auth, db, storage } from "../firebase";
import { updateProfile } from "firebase/auth";
import { doc, getDoc, setDoc, updateDoc, serverTimestamp } from "firebase/firestore";
import { ref as sref, uploadBytes, getDownloadURL } from "firebase/storage";

export default function SettingsPage() {
  const { user, logout } = useAuth();
  const [petName, setPetName] = useState("");
  const [email, setEmail] = useState("");
  const [bio, setBio] = useState("");
  const [photoURL, setPhotoURL] = useState("");
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState("");
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState("");
  const [ok, setOk] = useState("");

  useEffect(() => {
    if (!user) return;
    setEmail(user.email || "");
    setPetName(user.displayName || "");
    setPhotoURL(user.photoURL || "");

    (async () => {
      try {
        const snap = await getDoc(doc(db, "users", user.uid));
        if (snap.exists()) {
          const d = snap.data();
          if (d.displayName) setPetName(d.displayName);
          if (d.photoURL) setPhotoURL(d.photoURL);
          if (d.bio) setBio(d.bio);
        } else {
          await setDoc(doc(db, "users", user.uid), {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName || "",
            photoURL: user.photoURL || "",
            bio: "",
            createdAt: serverTimestamp(),
          });
        }
      } catch (e) {
        console.warn("load settings failed:", e);
      }
    })();
  }, [user]);

  function onPick(e) {
    const f = e.target.files?.[0];
    if (!f) return;
    setFile(f);
    const url = URL.createObjectURL(f);
    setPreview(url);
  }

  async function onSave(e) {
    e?.preventDefault?.();
    if (!user) return;
    setSaving(true);
    setError("");
    setOk("");

    try {
      let newPhotoURL = photoURL;

      if (file) {
        const path = `profile/${user.uid}/avatar.jpg`;
        const r = sref(storage, path);
        await uploadBytes(r, file);
        newPhotoURL = await getDownloadURL(r);
      }

      await updateProfile(auth.currentUser, {
        displayName: petName || "",
        photoURL: newPhotoURL || "",
      });

      await updateDoc(doc(db, "users", user.uid), {
        displayName: petName || "",
        photoURL: newPhotoURL || "",
        bio: bio || "",
        updatedAt: serverTimestamp(),
      });

      setPhotoURL(newPhotoURL);
      setOk("Profile updated.");
      setFile(null);
      setPreview("");
    } catch (e2) {
      setError(e2.message || "Failed to update profile.");
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className="min-h-[calc(100vh-80px)] flex items-start justify-center p-6 bg-[#FFE7CC]">
      <form onSubmit={onSave} className="w-full max-w-md bg-white/90 rounded-2xl shadow-lg p-6">
        <h2 className="text-2xl font-bold text-center mb-4">Settings</h2>

        {/* Avatar */}
        <div className="flex flex-col items-center mb-4">
          <div className="w-24 h-24 rounded-full overflow-hidden bg-[#F5F5F5] border">
            <img
              src={preview || photoURL || "https://i.pravatar.cc/96?img=3"}
              alt="avatar"
              className="w-full h-full object-cover"
            />
          </div>
          <label
            htmlFor="pick-avatar"
            className="mt-3 px-3 py-1 rounded-full text-sm bg-[#FFE7CC] text-[#8B6F47] border border-[#E2B887]/60 cursor-pointer"
          >
            Change Photo
          </label>
          <input id="pick-avatar" type="file" accept="image/*" className="hidden" onChange={onPick} />
        </div>

        {/* Pet Name */}
        <label className="block text-sm text-[#8B6F47] mb-1">Pet Name</label>
        <input
          value={petName}
          onChange={(e) => setPetName(e.target.value)}
          className="w-full px-4 py-3 border-2 border-orange-200 rounded-2xl focus:border-orange-400 focus:outline-none transition bg-white/80 backdrop-blur mb-3"
          placeholder="Your pet's name"
        />

        {/* Email (read-only) */}
        <label className="block text-sm text-[#8B6F47] mb-1">Email</label>
        <input
          value={email}
          readOnly
          className="w-full px-4 py-3 border-2 border-orange-100 rounded-2xl bg-gray-50 text-gray-500 mb-3"
        />

        {/* Bio */}
        <label className="block text-sm text-[#8B6F47] mb-1">Bio</label>
        <textarea
          value={bio}
          onChange={(e) => setBio(e.target.value)}
          rows={3}
          placeholder="Tell others about your pet…"
          className="w-full mb-4 px-4 py-3 border-2 border-[#E2B887]/40 rounded-2xl focus:outline-none focus:border-[#E2B887] bg-white/80"
        />

        {error && <div className="mb-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-2xl px-4 py-2">{error}</div>}
        {ok && <div className="mb-3 text-sm text-green-700 bg-green-50 border border-green-200 rounded-2xl px-4 py-2">{ok}</div>}

        <button type="submit" disabled={saving} className="w-full bg-[#E2B887] text-white py-3 rounded-2xl font-semibold hover:brightness-95 transition disabled:opacity-50">
          {saving ? "Saving..." : "Save Changes"}
        </button>

        <button type="button" onClick={logout} className="w-full mt-3 bg-red-500 text-white py-3 rounded-2xl font-semibold hover:brightness-95 transition">
          Logout
        </button>
      </form>
    </div>
  );
