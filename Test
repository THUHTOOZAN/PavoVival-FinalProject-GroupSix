// src/pages/SettingsPage.js
import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { auth, db, storage } from "../firebase";
import { useNavigate } from "react-router-dom";
import { updateProfile } from "firebase/auth";
import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
  serverTimestamp,
} from "firebase/firestore";
import { ref as sref, uploadBytes, getDownloadURL } from "firebase/storage";

export default function SettingsPage() {
  const { user, logout } = useAuth();         // real Firebase user
  const navigate = useNavigate();

  // form state
  const [petName, setPetName] = useState("");
  const [bio, setBio]       = useState("");
  const [email, setEmail]   = useState("");
  const [photoURL, setPhotoURL] = useState("");
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState("");

  // UI state
  const [saving, setSaving] = useState(false);
  const [error, setError]   = useState("");
  const [ok, setOk]         = useState("");

  // Load current profile from Auth + Firestore
  useEffect(() => {
    if (!user) return;
    setEmail(user.email || "");
    setPetName(user.displayName || "");
    setPhotoURL(user.photoURL || "");

    (async () => {
      try {
        const snap = await getDoc(doc(db, "users", user.uid));
        if (snap.exists()) {
          const d = snap.data();
          if (d.displayName) setPetName(d.displayName);
          if (d.bio)         setBio(d.bio);
          if (d.photoURL)    setPhotoURL(d.photoURL);
        } else {
          // create minimal doc if missing
          await setDoc(doc(db, "users", user.uid), {
            uid: user.uid,
            email: user.email || "",
            displayName: user.displayName || "",
            photoURL: user.photoURL || "",
            bio: "",
            createdAt: serverTimestamp(),
          });
        }
      } catch (e) {
        console.warn("settings load failed:", e);
      }
    })();
  }, [user]);

  // pick avatar
  function onPick(e) {
    const f = e.target.files?.[0];
    if (!f) return;
    setFile(f);
    setPreview(URL.createObjectURL(f));
  }

  // save all changes
  async function onSave(e) {
    e?.preventDefault?.();
    if (!user) return;

    setSaving(true);
    setError("");
    setOk("");

    try {
      let newPhoto = photoURL;

      // upload avatar if chosen
      if (file) {
        const r = sref(storage, `profile/${user.uid}/avatar.jpg`);
        await uploadBytes(r, file);
        newPhoto = await getDownloadURL(r);
      }

      // update Firebase Auth displayName/photo
      await updateProfile(auth.currentUser, {
        displayName: petName || "",
        photoURL: newPhoto || "",
      });

      // update Firestore profile doc (source of truth for app)
      await updateDoc(doc(db, "users", user.uid), {
        displayName: petName || "",
        photoURL: newPhoto || "",
        bio: bio || "",
        updatedAt: serverTimestamp(),
      });

      setPhotoURL(newPhoto);
      setOk("Profile updated.");
      setFile(null);
      setPreview("");
    } catch (e) {
      setError(e.message || "Failed to update profile.");
    } finally {
      setSaving(false);
    }
  }

  return (
    <div className="min-h-[calc(100vh-80px)] flex items-start justify-center p-6 bg-[#FFE7CC]">
      <form onSubmit={onSave} className="w-full max-w-md bg-white/90 rounded-2xl shadow-lg p-6">
        <h2 className="text-2xl font-bold text-center mb-4">Settings</h2>

        {/* Avatar */}
        <div className="flex flex-col items-center mb-4">
          <div className="w-24 h-24 rounded-full overflow-hidden bg-[#F5F5F5] border">
            <img
              src={preview || photoURL || "https://i.pravatar.cc/96?img=3"}
              alt="avatar"
              className="w-full h-full object-cover"
            />
          </div>
          <label
            htmlFor="pick-avatar"
            className="mt-3 px-3 py-1 rounded-full text-sm bg-[#FFE7CC] text-[#8B6F47] border border-[#E2B887]/60 cursor-pointer"
          >
            Change Photo
          </label>
          <input id="pick-avatar" type="file" accept="image/*" className="hidden" onChange={onPick} />
        </div>

        {/* Pet Name */}
        <label className="block text-sm text-[#8B6F47] mb-1">Pet Name</label>
        <input
          value={petName}
          onChange={(e) => setPetName(e.target.value)}
          className="w-full px-4 py-3 border-2 border-orange-200 rounded-2xl focus:border-orange-400 focus:outline-none transition bg-white/80 backdrop-blur mb-3"
          placeholder="Your pet's name"
        />

        {/* Bio */}
        <label className="block text-sm text-[#8B6F47] mb-1">Bio</label>
        <textarea
          rows={3}
          value={bio}
          onChange={(e) => setBio(e.target.value)}
          className="w-full px-4 py-3 border-2 border-orange-200 rounded-2xl focus:border-orange-400 focus:outline-none transition bg-white/80 backdrop-blur mb-3"
          placeholder="A short bio…"
        />

        {/* Email (read-only) */}
        <label className="block text-sm text-[#8B6F47] mb-1">Email</label>
        <input
          value={email}
          readOnly
          className="w-full px-4 py-3 border-2 border-orange-100 rounded-2xl bg-gray-50 text-gray-500 mb-4"
        />

        {error && (
          <div className="mb-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-2xl px-4 py-2">
            {error}
          </div>
        )}
        {ok && (
          <div className="mb-3 text-sm text-green-700 bg-green-50 border border-green-200 rounded-2xl px-4 py-2">
            {ok}
          </div>
        )}

        {/* Primary actions */}
        <div className="flex items-center gap-3">
          <button
            type="submit"
            disabled={saving}
            className="flex-1 bg-[#E2B887] text-white py-3 rounded-2xl font-semibold hover:brightness-95 transition disabled:opacity-50"
          >
            {saving ? "Saving..." : "Save Changes"}
          </button>
          <button
            type="button"
            className="px-4 py-3 rounded-2xl border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF1DF]"
            onClick={() => navigate("/profile")}
          >
            View Profile
          </button>
        </div>

        {/* Secondary */}
        <button
          type="button"
          onClick={logout}
          className="w-full mt-3 bg-red-500 text-white py-3 rounded-2xl font-semibold hover:brightness-95 transition"
        >
          Logout
        </button>
      </form>
    </div>
  );
}

..... 

// src/pages/ProfilePage.js
import React, { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { db } from "../firebase";
import {
  collection,
  onSnapshot,
  orderBy,
  query,
  where,
  doc,
  getDoc,
} from "firebase/firestore";
import { useNavigate } from "react-router-dom";

export default function ProfilePage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  // profile doc (name, photo, bio, counts…)
  const [profile, setProfile] = useState({
    displayName: "",
    photoURL: "",
    bio: "",
    followers: 0,
    following: 0,
  });

  // my posts
  const [posts, setPosts] = useState([]);
  const [open, setOpen] = useState(null); // modal state: a post or null

  // load user profile
  useEffect(() => {
    if (!user) return;
    (async () => {
      const snap = await getDoc(doc(db, "users", user.uid));
      if (snap.exists()) {
        const d = snap.data();
        setProfile({
          displayName: d.displayName || user.displayName || "Me",
          photoURL: d.photoURL || user.photoURL || "",
          bio: d.bio || "",
          followers: d.followers || 0,
          following: d.following || 0,
        });
      }
    })();
  }, [user]);

  // live query: my posts only
  useEffect(() => {
    if (!user) return;
    const q = query(
      collection(db, "posts"),
      where("uid", "==", user.uid),
      orderBy("createdAt", "desc")
    );
    const unsub = onSnapshot(q, (snap) => {
      const rows = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      setPosts(rows);
    });
    return unsub;
  }, [user]);

  const postCount = posts.length;

  const name = useMemo(
    () => profile.displayName || "My profile",
    [profile.displayName]
  );

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC]">
      <div className="max-w-4xl mx-auto px-4 py-6">
        {/* Header card */}
        <div className="bg-white/90 rounded-2xl shadow p-5 flex items-center gap-5">
          <div className="w-20 h-20 rounded-full overflow-hidden border">
            <img
              src={profile.photoURL || "https://i.pravatar.cc/160?img=8"}
              alt="me"
              className="w-full h-full object-cover"
            />
          </div>

          <div className="flex-1">
            <div className="flex items-center gap-4 flex-wrap">
              <h1 className="text-2xl font-bold text-[#8B6F47]">{name}</h1>

              {/* counts sit right under name on small, inline on wide */}
              <div className="flex items-center gap-5 text-sm text-[#8B6F47]/80">
                <div><span className="font-semibold">{postCount}</span> posts</div>
                <div><span className="font-semibold">{profile.followers}</span> followers</div>
                <div><span className="font-semibold">{profile.following}</span> following</div>
              </div>
            </div>

            {profile.bio ? (
              <p className="mt-2 text-[#8B6F47]">{profile.bio}</p>
            ) : (
              <button
                className="mt-2 text-[#8B6F47] underline underline-offset-4"
                onClick={() => navigate("/settings")}
              >
                Add bio
              </button>
            )}
          </div>

          {/* small action buttons */}
          <div className="flex items-center gap-2">
            <button
              onClick={() => navigate("/add")}
              className="px-3 py-2 rounded-xl text-sm bg-[#E2B887] text-white hover:brightness-95"
              title="Create post"
            >
              Create
            </button>
            <button
              onClick={() => navigate("/chat")}
              className="px-3 py-2 rounded-xl text-sm border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF1DF]"
              title="Message"
            >
              Message
            </button>
            <button
              onClick={() => navigate("/settings")}
              className="px-3 py-2 rounded-xl text-sm border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF1DF]"
              title="Edit Profile"
            >
              Edit
            </button>
          </div>
        </div>

        {/* Posts grid */}
        <div className="mt-6 grid grid-cols-2 md:grid-cols-3 gap-4">
          {posts.length === 0 ? (
            <div className="col-span-full text-center text-[#8B6F47]/70">
              No posts yet.
            </div>
          ) : (
            posts.map((p) => {
              const cover =
                (Array.isArray(p.images) && p.images[0]) ||
                p.imageUrl ||
                "";
              return (
                <button
                  key={p.id}
                  onClick={() => setOpen(p)}
                  className="aspect-square bg-white/60 rounded-xl overflow-hidden shadow hover:shadow-md transition border border-[#E2B887]/30"
                >
                  {cover ? (
                    <img
                      src={cover}
                      alt="post"
                      className="w-full h-full object-cover"
                      loading="lazy"
                    />
                  ) : (
                    <div className="w-full h-full grid place-items-center text-[#8B6F47]/50">
                      (no image)
                    </div>
                  )}
                </button>
              );
            })
          )}
        </div>
      </div>

      {/* Simple modal viewer */}
      {open && (
        <div className="fixed inset-0 bg-black/60 z-50 grid place-items-center p-4" onClick={() => setOpen(null)}>
          <div
            className="bg-white rounded-2xl max-w-2xl w-full overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-4 flex items-center gap-3 border-b">
              <img
                src={profile.photoURL || "https://i.pravatar.cc/64?img=8"}
                alt="me"
                className="w-8 h-8 rounded-full object-cover"
              />
              <div className="font-semibold text-[#8B6F47]">{name}</div>
            </div>

            {Array.isArray(open.images) && open.images.length > 0 ? (
              <div className="max-h-[70vh] overflow-auto">
                {open.images.map((u, i) => (
                  <img key={i} src={u} alt={`post ${i}`} className="w-full object-contain" />
                ))}
              </div>
            ) : (
              open.imageUrl && <img src={open.imageUrl} alt="post" className="w-full object-contain" />
            )}

            {open.caption && (
              <div className="p-4 text-[#8B6F47] border-t">{open.caption}</div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
