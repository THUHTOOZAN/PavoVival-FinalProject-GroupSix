rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // users (you already have these)
    match /users/{uid} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == uid;
    }

    // posts (keep yours)

    // follows: users manage their own following & followers docs
    match /follows/{uid} {
      // I can read my follows; anyone can read counts by reading it (optional public read)
      allow read: if true;

      // I can write only inside my own follow subcollections
      match /following/{targetUid} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == uid;
      }
      match /followers/{sourceUid} {
        allow read: if true;
        // followers docs are written by the follower action (sourceUid writes into target's followers)
        allow write: if request.auth != null && request.auth.uid == sourceUid;
      }
    }

    // notifications: each user controls their own box
    match /notifications/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid; // private
      match /items/{nid} {
        allow read: if request.auth != null && request.auth.uid == uid;
        // allow writes by the recipient (mark read) or by any signed-in user to add a notification to the recipient
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && request.auth.uid == uid;
      }
    }
  }
}


......


// src/services/socialApi.js
import { db } from "../firebase";
import {
  doc,
  getDoc,
  setDoc,
  deleteDoc,
  serverTimestamp,
  runTransaction,
  collection,
  getCountFromServer
} from "firebase/firestore";

/** Follow targetUid from meUid and create a follow notification */
export async function followUser({ meUid, meProfile, targetUid, targetProfile }) {
  if (!meUid || !targetUid || meUid === targetUid) return;

  await runTransaction(db, async (tx) => {
    const myFollowingRef = doc(db, "follows", meUid, "following", targetUid);
    const theirFollowersRef = doc(db, "follows", targetUid, "followers", meUid);

    const myFollowingSnap = await tx.get(myFollowingRef);
    if (!myFollowingSnap.exists()) {
      tx.set(myFollowingRef, {
        uid: targetUid,
        displayName: targetProfile?.displayName || "",
        photoURL: targetProfile?.photoURL || "",
        createdAt: serverTimestamp(),
      });
      tx.set(theirFollowersRef, {
        uid: meUid,
        displayName: meProfile?.displayName || "",
        photoURL: meProfile?.photoURL || "",
        createdAt: serverTimestamp(),
      });
    }
  });

  // Add a notification to the target
  await setDoc(doc(collection(db, "notifications", targetUid, "items")), {
    type: "follow",
    fromUid: meUid,
    fromName: meProfile?.displayName || "",
    fromPhoto: meProfile?.photoURL || "",
    createdAt: serverTimestamp(),
    read: false,
  });
}

/** Unfollow */
export async function unfollowUser({ meUid, targetUid }) {
  if (!meUid || !targetUid || meUid === targetUid) return;
  await runTransaction(db, async (tx) => {
    tx.delete(doc(db, "follows", meUid, "following", targetUid));
    tx.delete(doc(db, "follows", targetUid, "followers", meUid));
  });
}

/** Am I following this user? */
export async function isFollowing({ meUid, targetUid }) {
  if (!meUid || !targetUid) return false;
  const snap = await getDoc(doc(db, "follows", meUid, "following", targetUid));
  return snap.exists();
}

/** Quick counts */
export async function getFollowCounts(uid) {
  const followingCount = (await getCountFromServer(collection(db, "follows", uid, "following"))).data().count;
  const followersCount = (await getCountFromServer(collection(db, "follows", uid, "followers"))).data().count;
  return { followingCount, followersCount };
}

.......




// src/components/FollowButton.jsx
import React, { useEffect, useState } from "react";
import { followUser, unfollowUser, isFollowing } from "../services/socialApi";

export default function FollowButton({ me, target, className = "" }) {
  const [loading, setLoading] = useState(false);
  const [following, setFollowing] = useState(false);

  useEffect(() => {
    let mounted = true;
    (async () => {
      if (!me?.uid || !target?.uid || me.uid === target.uid) return;
      const ok = await isFollowing({ meUid: me.uid, targetUid: target.uid });
      if (mounted) setFollowing(ok);
    })();
    return () => (mounted = false);
  }, [me?.uid, target?.uid]);

  if (!me?.uid || !target?.uid || me.uid === target.uid) return null;

  async function toggle() {
    setLoading(true);
    try {
      if (following) {
        await unfollowUser({ meUid: me.uid, targetUid: target.uid });
        setFollowing(false);
      } else {
        await followUser({
          meUid: me.uid,
          meProfile: { displayName: me.displayName, photoURL: me.photoURL },
          targetUid: target.uid,
          targetProfile: { displayName: target.displayName, photoURL: target.photoURL },
        });
        setFollowing(true);
      }
    } finally {
      setLoading(false);
    }
  }

  return (
    <button
      disabled={loading}
      onClick={toggle}
      className={
        (following
          ? "bg-[#FFE7CC] border border-[#E2B887]/60 text-[#8B6F47]"
          : "bg-[#E2B887] text-white") +
        " px-3 py-1.5 rounded-full text-sm " + className
      }
    >
      {loading ? "â€¦" : following ? "Following" : "Follow"}
    </button>
  );
}



.........


// src/pages/NotificationsPage.js
import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { db } from "../firebase";
import { collection, onSnapshot, orderBy, query, updateDoc } from "firebase/firestore";

export default function NotificationsPage() {
  const { user } = useAuth();
  const [items, setItems] = useState([]);

  useEffect(() => {
    if (!user) return;
    const q = query(
      collection(db, "notifications", user.uid, "items"),
      orderBy("createdAt", "desc")
    );
    const unsub = onSnapshot(q, (snap) => {
      setItems(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
    return unsub;
  }, [user]);

  async function markRead(id) {
    await updateDoc(
      collection(db, "notifications", user.uid, "items").doc
        ? collection(db, "notifications", user.uid, "items").doc(id)
        : null,
      { read: true }
    ).catch(() => {});
  }

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC]">
      <div className="max-w-2xl mx-auto p-6">
        <h2 className="text-2xl font-bold text-[#8B6F47] mb-4">Notifications</h2>
        <div className="space-y-3">
          {items.length === 0 && (
            <div className="text-[#8B6F47]/70">No notifications yet.</div>
          )}
          {items.map((n) => (
            <div
              key={n.id}
              className={
                "bg-white/90 rounded-xl p-3 border " +
                (n.read ? "border-transparent" : "border-[#E2B887]/60")
              }
              onClick={() => markRead(n.id)}
            >
              {n.type === "follow" ? (
                <div className="flex items-center gap-3">
                  <img
                    src={n.fromPhoto || "https://i.pravatar.cc/40?img=11"}
                    alt=""
                    className="w-8 h-8 rounded-full object-cover"
                  />
                  <div className="text-[#8B6F47]">
                    <b>{n.fromName || "Someone"}</b> started following you.
                  </div>
                </div>
              ) : (
                <div className="text-[#8B6F47]">Notification</div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}


........


// src/pages/SearchPage.js
import React, { useEffect, useMemo, useState } from "react";
import { db } from "../firebase";
import { collection, getDocs, limit, orderBy, query } from "firebase/firestore";
import { useNavigate } from "react-router-dom";

export default function SearchPage() {
  const [qtext, setQtext] = useState("");
  const [users, setUsers] = useState([]);
  const nav = useNavigate();

  useEffect(() => {
    (async () => {
      // simple: load first ~100 users; client-filter
      const snap = await getDocs(query(collection(db, "users"), orderBy("displayName"), limit(100)));
      setUsers(snap.docs.map((d) => ({ uid: d.id, ...d.data() })));
    })();
  }, []);

  const filtered = useMemo(() => {
    const t = qtext.trim().toLowerCase();
    if (!t) return users;
    return users.filter((u) =>
      (u.displayName || "").toLowerCase().includes(t) ||
      (u.email || "").toLowerCase().includes(t)
    );
  }, [qtext, users]);

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC]">
      <div className="max-w-3xl mx-auto p-6">
        <h2 className="text-2xl font-bold text-[#8B6F47] mb-4">Search</h2>
        <input
          value={qtext}
          onChange={(e) => setQtext(e.target.value)}
          placeholder="Search users by name or email"
          className="w-full p-3 rounded-2xl border-2 border-[#E2B887]/40 focus:border-[#E2B887] outline-none bg-white/90"
        />
        <div className="mt-4 space-y-2">
          {filtered.map((u) => (
            <button
              key={u.uid}
              onClick={() => nav(`/u/${u.uid}`)}
              className="w-full flex items-center gap-3 p-3 bg-white/90 rounded-xl hover:bg-white border border-[#E2B887]/30"
            >
              <img
                src={u.photoURL || "https://i.pravatar.cc/40?img=9"}
                className="w-10 h-10 rounded-full object-cover"
              />
              <div className="text-left">
                <div className="text-[#8B6F47] font-semibold">{u.displayName || "Unknown"}</div>
                <div className="text-xs text-[#8B6F47]/70">{u.email}</div>
              </div>
            </button>
          ))}
          {filtered.length === 0 && (
            <div className="text-[#8B6F47]/70">No users found.</div>
          )}
        </div>
      </div>
    </div>
  );
}

.......


// src/pages/UserProfilePage.js
import React, { useEffect, useMemo, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { db } from "../firebase";
import { collection, doc, getDoc, getDocs, orderBy, query, where } from "firebase/firestore";
import { useAuth } from "../context/AuthContext";
import FollowButton from "../components/FollowButton";
import { getFollowCounts } from "../services/socialApi";

export default function UserProfilePage() {
  const { uid } = useParams(); // target user id from /u/:uid
  const { user: me } = useAuth();
  const nav = useNavigate();

  const [profile, setProfile] = useState(null);
  const [posts, setPosts] = useState([]);
  const [counts, setCounts] = useState({ followers: 0, following: 0 });

  useEffect(() => {
    if (!uid) return;
    (async () => {
      const p = await getDoc(doc(db, "users", uid));
      setProfile(p.exists() ? p.data() : { displayName: "User" });

      // posts by this user
      try {
        const q1 = query(collection(db, "posts"), where("uid", "==", uid), orderBy("createdAt", "desc"));
        const ds = await getDocs(q1);
        setPosts(ds.docs.map((d) => ({ id: d.id, ...d.data() })));
      } catch {
        const q2 = query(collection(db, "posts"), where("uid", "==", uid));
        const ds = await getDocs(q2);
        setPosts(ds.docs.map((d) => ({ id: d.id, ...d.data() })));
      }

      // counts
      const { followersCount, followingCount } = await getFollowCounts(uid);
      setCounts({ followers: followersCount, following: followingCount });
    })();
  }, [uid]);

  const name = useMemo(() => profile?.displayName || "User", [profile]);

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC]">
      <div className="max-w-5xl mx-auto px-4 py-6">
        <div className="bg-white/90 rounded-2xl shadow p-6 flex items-center gap-5">
          <img
            src={profile?.photoURL || "https://i.pravatar.cc/120?img=6"}
            className="w-20 h-20 rounded-full object-cover border"
          />
          <div className="flex-1">
            <div className="flex items-center gap-3">
              <h1 className="text-2xl font-bold text-[#8B6F47]">{name}</h1>
              {me && (
                <FollowButton
                  me={{ uid: me.uid, displayName: me.displayName, photoURL: me.photoURL }}
                  target={{ uid, displayName: profile?.displayName, photoURL: profile?.photoURL }}
                />
              )}
              <button
                onClick={() => nav("/chat")}
                className="px-3 py-1.5 rounded-full bg-[#FFE7CC] border border-[#E2B887]/60 text-[#8B6F47] text-sm"
              >
                Message
              </button>
            </div>
            <div className="mt-1 flex gap-6 text-[#8B6F47]">
              <span><b>{posts.length}</b> posts</span>
              <span><b>{counts.followers}</b> followers</span>
              <span><b>{counts.following}</b> following</span>
            </div>
            {profile?.bio && <p className="mt-2 text-[#8B6F47]/80">{profile.bio}</p>}
          </div>
        </div>

        <div className="mt-6 grid grid-cols-2 md:grid-cols-3 gap-4">
          {posts.length === 0 ? (
            <div className="col-span-full text-center text-[#8B6F47]/70">No posts yet.</div>
          ) : (
            posts.map((p) => (
              <div key={p.id} className="bg-white/90 rounded-xl shadow overflow-hidden">
                {Array.isArray(p.images) && p.images[0] ? (
                  <img src={p.images[0]} alt="" className="w-full aspect-square object-cover" />
                ) : (
                  <div className="w-full aspect-square bg-[#F5F5F5]" />
                )}
                {p.text && <div className="px-3 py-2 text-sm text-[#8B6F47] line-clamp-2">{p.text}</div>}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
}

.......



// imports at top
import { Camera, Search, Home, Bell, Plus, MessageCircle, Settings, User } from "lucide-react";
import { NavLink } from "react-router-dom";

// ... keep your current Layout styles

// Bottom Navigation (replace the previous one)
<nav className="bg-white border-t border-[#E2B887]/30 px-6 py-4">
  <div className="max-w-7xl mx-auto flex items-center justify-around">
    <NavButton icon={Home} to="/home" />
    <NavButton icon={User} to="/profile" />
    <NavButton icon={Plus} to="/add" isCenter />
    <NavButton icon={Search} to="/search" />
    <NavButton icon={Bell} to="/notifications" />
    <NavButton icon={Settings} to="/settings" />
  </div>
</nav>



.........