// src/services/postApi.js
import { db, storage } from "../firebase";
import {
  addDoc,
  collection,
  doc,
  serverTimestamp,
  setDoc,
} from "firebase/firestore";
import { getDownloadURL, ref as sref, uploadBytes } from "firebase/storage";

/**
 * Create a post with up to 10 images.
 * Saves into:
 *   - /posts (global feed)
 *   - /users/{uid}/posts/{postId} (owner index)
 */
export async function createPost({ uid, author, text, files }) {
  if (!uid) throw new Error("No uid supplied to createPost");
  const images = Array.from(files || []).slice(0, 10);

  // 1) Upload to Storage: posts/{uid}/{timestamp}_{name}
  const urls = [];
  for (const file of images) {
    const path = `posts/${uid}/${Date.now()}_${file.name}`;
    const r = sref(storage, path);
    await uploadBytes(r, file);
    const url = await getDownloadURL(r);
    urls.push(url);
  }

  // 2) Create Firestore post
  const post = {
    uid,
    text: text || "",
    images: urls,                 // []
    likeCount: 0,
    commentCount: 0,
    createdAt: serverTimestamp(), // IMPORTANT for ordering
    author: {
      displayName: author?.displayName || "",
      photoURL: author?.photoURL || "",
    },
  };

  // /posts
  const ref = await addDoc(collection(db, "posts"), post);

  // /users/{uid}/posts/{postId} (index)
  await setDoc(doc(db, "users", uid, "posts", ref.id), {
    ref: ref.path,
    createdAt: serverTimestamp(),
  });

  return ref.id;
}

.................

// src/pages/AddPostPage.js
import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { db } from "../firebase";
import { doc, getDoc } from "firebase/firestore";
import { createPost } from "../services/postApi";
import { useNavigate } from "react-router-dom";

export default function AddPostPage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  const [profile, setProfile] = useState(null);
  const [text, setText] = useState("");
  const [files, setFiles] = useState([]);
  const [previews, setPreviews] = useState([]);
  const [posting, setPosting] = useState(false);
  const [err, setErr] = useState("");

  // Load profile to show author name/photo in post
  useEffect(() => {
    if (!user) return;
    (async () => {
      const snap = await getDoc(doc(db, "users", user.uid));
      setProfile(snap.exists() ? snap.data() : { displayName: user.displayName, photoURL: user.photoURL });
    })();
  }, [user]);

  function onPick(e) {
    const list = Array.from(e.target.files || []).slice(0, 10);
    setFiles(list);
    setPreviews(list.map((f) => URL.createObjectURL(f)));
  }

  async function onSubmit(e) {
    e.preventDefault();
    if (!user) return setErr("Please sign in");
    setPosting(true);
    setErr("");

    try {
      await createPost({
        uid: user.uid,                                 // <<<<< ensures NOT "undefined"
        author: { displayName: profile?.displayName, photoURL: profile?.photoURL },
        text,
        files,
      });
      // go to profile after posting
      navigate("/profile");
    } catch (e2) {
      console.error(e2);
      setErr(e2.message || "Post failed");
    } finally {
      setPosting(false);
    }
  }

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC] flex justify-center px-4 py-6">
      <form
        onSubmit={onSubmit}
        className="w-full max-w-xl bg-white/90 rounded-2xl shadow p-6"
      >
        <h2 className="text-xl font-bold text-[#8B6F47] mb-4">Create Post</h2>

        <textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="Say something about your pet…"
          className="w-full min-h-[120px] p-3 rounded-xl border-2 border-[#E2B887]/40 focus:border-[#E2B887] outline-none mb-3"
        />

        <label
          htmlFor="pick-post-images"
          className="inline-block mb-3 px-3 py-1 rounded-full bg-[#FFE7CC] text-[#8B6F47] border border-[#E2B887]/60 cursor-pointer"
        >
          Add images
        </label>
        <input
          id="pick-post-images"
          type="file"
          accept="image/*"
          multiple
          className="hidden"
          onChange={onPick}
        />

        {previews.length > 0 && (
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mb-4">
            {previews.map((src, i) => (
              <img key={i} src={src} alt="" className="aspect-square object-cover rounded-xl border" />
            ))}
          </div>
        )}

        {err && (
          <div className="mb-3 text-sm text-red-700 bg-red-50 border border-red-200 rounded-2xl px-3 py-2">
            {err}
          </div>
        )}

        <button
          type="submit"
          disabled={posting}
          className="w-full py-3 rounded-2xl bg-[#E2B887] text-white font-semibold disabled:opacity-50"
        >
          {posting ? "Posting…" : "Post"}
        </button>
      </form>
    </div>
  );
}


............



// src/pages/HomePage.js
import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import { collection, getDocs, orderBy, query } from "firebase/firestore";

export default function HomePage() {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    (async () => {
      // If Firestore asks for an index, create it (posts: orderBy createdAt desc)
      let q1 = query(collection(db, "posts"), orderBy("createdAt", "desc"));
      const snap = await getDocs(q1);
      setPosts(snap.docs.map(d => ({ id: d.id, ...d.data() })));
    })();
  }, []);

  return (
    <div className="space-y-4">
      {posts.map((p) => (
        <div key={p.id} className="bg-white/90 rounded-2xl shadow p-4">
          <div className="flex items-center gap-3 mb-3">
            <img
              src={p?.author?.photoURL || "https://i.pravatar.cc/40?img=7"}
              alt=""
              className="w-10 h-10 rounded-full object-cover"
            />
            <div className="font-semibold text-[#8B6F47]">
              {p?.author?.displayName || "User"}
            </div>
          </div>

          {Array.isArray(p.images) && p.images.length > 0 && (
            <img src={p.images[0]} alt="" className="w-full rounded-xl object-cover" />
          )}
          {p.text && <p className="mt-3 text-[#8B6F47]">{p.text}</p>}
        </div>
      ))}
    </div>
  );
}

.............

// src/pages/ProfilePage.js
import React, { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { db } from "../firebase";
import { collection, doc, getDoc, getDocs, orderBy, query, where } from "firebase/firestore";
import { useNavigate } from "react-router-dom";

export default function ProfilePage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  const [profile, setProfile] = useState(null);
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    if (!user) return;
    (async () => {
      const snap = await getDoc(doc(db, "users", user.uid));
      setProfile(snap.exists() ? snap.data() : { displayName: user.displayName, photoURL: user.photoURL });

      // needs index: posts where uid== and orderBy createdAt desc
      try {
        const q1 = query(
          collection(db, "posts"),
          where("uid", "==", user.uid),
          orderBy("createdAt", "desc")
        );
        const ds = await getDocs(q1);
        setPosts(ds.docs.map(d => ({ id: d.id, ...d.data() })));
      } catch (_) {
        // fallback without orderBy if index not created yet
        const q2 = query(collection(db, "posts"), where("uid", "==", user.uid));
        const ds = await getDocs(q2);
        setPosts(
          ds.docs
            .map(d => ({ id: d.id, ...d.data() }))
            .sort((a, b) => (b.createdAt?.seconds || 0) - (a.createdAt?.seconds || 0))
        );
      }
    })();
  }, [user]);

  const name = useMemo(() => profile?.displayName || "", [profile]);

  if (!user) return <div className="p-6">Please sign in</div>;

  return (
    <div className="min-h-[calc(100vh-80px)] px-4 py-6 bg-[#FFE7CC]">
      <div className="max-w-5xl mx-auto">
        <div className="bg-white/90 rounded-2xl shadow p-6 flex items-center gap-5">
          <img
            src={profile?.photoURL || "https://i.pravatar.cc/120?img=5"}
            alt={name}
            className="w-20 h-20 rounded-full object-cover border"
          />
          <div className="flex-1">
            <div className="flex items-center gap-3">
              <h1 className="text-2xl font-bold text-[#8B6F47]">{name}</h1>
              <div className="flex gap-2">
                <button onClick={() => navigate("/add")} className="px-3 py-1 text-sm rounded-full bg-[#E2B887] text-white">Create post</button>
                <button onClick={() => navigate("/chat")} className="px-3 py-1 text-sm rounded-full border border-[#E2B887]/60 text-[#8B6F47]">Message</button>
                <button onClick={() => navigate("/settings")} className="px-3 py-1 text-sm rounded-full border border-[#E2B887]/60 text-[#8B6F47]">Edit profile</button>
              </div>
            </div>
            <div className="mt-2 flex gap-6 text-sm text-[#8B6F47]">
              <span><b>{posts.length}</b> posts</span>
              <span><b>0</b> followers</span>
              <span><b>0</b> following</span>
            </div>
          </div>
        </div>

        <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
          {posts.length === 0 ? (
            <div className="col-span-full text-center text-[#8B6F47]/70">No posts yet.</div>
          ) : (
            posts.map((p) => (
              <div key={p.id} className="bg-white/90 rounded-xl shadow overflow-hidden">
                {Array.isArray(p.images) && p.images[0] ? (
                  <img src={p.images[0]} alt="" className="w-full aspect-square object-cover" />
                ) : (
                  <div className="w-full aspect-square bg-[#F5F5F5]" />
                )}
                {p.text && <div className="px-3 py-2 text-sm text-[#8B6F47] line-clamp-2">{p.text}</div>}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
}

........


rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    match /users/{uid} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == uid;

      match /posts/{postId} {
        allow read, write: if request.auth != null && request.auth.uid == uid;
      }
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    match /chats/{chatId} {
      allow read, write:
        if request.auth != null &&
           request.resource.data.members is list &&
           request.auth.uid in request.resource.data.members;

      match /messages/{msgId} {
        allow read, write:
          if request.auth != null &&
             request.auth.uid in get(/databases/$(db)/documents/chats/$(chatId)).data.members;
      }
    }
  }
}


.........



rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    match /profile/{uid}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    match /chats/{chatId}/{uid}/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    // images used in posts
    match /posts/{uid}/{filePath=**} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == uid;
    }
  }
}


