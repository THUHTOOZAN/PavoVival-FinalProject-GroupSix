// src/pages/ProfilePage.js
// ---------------------------------------------------------
// Social-style Profile page
// - Header with cover, avatar, name, email
// - Stats row (Posts / Followers / Following)
// - Posts grid (image or text cards).
// ---------------------------------------------------------

import React, { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { getUserPosts, getUserStats } from "../services/postApi";
import { useNavigate } from "react-router-dom";

export default function ProfilePage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  const [loading, setLoading] = useState(true);
  const [posts, setPosts] = useState([]);
  const [stats, setStats] = useState({
    postsCount: 0,
    followersCount: 0,
    followingCount: 0,
  });

  // Lightbox for images
  const [openImg, setOpenImg] = useState("");

  // Basic guard
  const displayName = user?.displayName || "Your name";
  const avatar = user?.photoURL || "https://i.pravatar.cc/120?img=5";

  const initials = useMemo(() => {
    const n = displayName.trim();
    if (!n) return "P";
    const parts = n.split(" ");
    return (parts[0][0] + (parts[1]?.[0] || "")).toUpperCase();
  }, [displayName]);

  useEffect(() => {
    if (!user) return;
    (async () => {
      try {
        const [list, s] = await Promise.all([
          getUserPosts(user.uid),
          getUserStats(user.uid),
        ]);
        setPosts(list);
        setStats(s);
      } finally {
        setLoading(false);
      }
    })();
  }, [user]);

  if (!user) {
    return <div className="p-6">Please sign in.</div>;
  }

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#FFE7CC]">
      {/* Cover */}
      <div className="h-36 md:h-44 bg-[linear-gradient(135deg,#E2B887_0%,#B5EAD7_100%)]" />

      {/* Card */}
      <div className="-mt-12 md:-mt-16 mx-auto max-w-4xl px-4">
        <div className="bg-white rounded-2xl shadow p-5 md:p-6">
          {/* Header row */}
          <div className="flex items-center gap-4 md:gap-6">
            <div className="relative">
              <img
                src={avatar}
                alt={displayName}
                className="w-20 h-20 md:w-24 md:h-24 rounded-full object-cover border-4 border-white shadow"
              />
              {/* fallback initials circle when avatar fails */}
              {/* (optional) */}
            </div>

            <div className="flex-1">
              <h1 className="text-xl md:text-2xl font-bold text-[#8B6F47]">
                {displayName}
              </h1>
              <p className="text-gray-500 text-sm">{user.email}</p>
            </div>

            <div className="flex gap-2">
              <button
                onClick={() => navigate("/settings")}
                className="px-4 py-2 rounded-xl border border-[#E2B887]/60 text-[#8B6F47] hover:bg-[#FFF4E6]"
              >
                Edit Profile
              </button>
              <button
                onClick={() => navigate("/add")}
                className="px-4 py-2 rounded-xl bg-[#E2B887] text-white hover:brightness-95"
              >
                + New Post
              </button>
            </div>
          </div>

          {/* Stats */}
          <div className="mt-6 grid grid-cols-3 divide-x divide-[#E2B887]/30 text-center">
            <Stat label="Posts" value={stats.postsCount} />
            <Stat label="Followers" value={stats.followersCount} />
            <Stat label="Following" value={stats.followingCount} />
          </div>
        </div>
      </div>

      {/* Posts Grid */}
      <div className="mx-auto max-w-4xl px-4 py-6">
        <h2 className="text-lg font-semibold text-[#8B6F47] mb-3">
          Posts
        </h2>

        {loading ? (
          <SkeletonGrid />
        ) : posts.length === 0 ? (
          <EmptyState />
        ) : (
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3 md:gap-4">
            {posts.map((p) => (
              <PostTile key={p.id} post={p} onOpenImage={setOpenImg} />
            ))}
          </div>
        )}
      </div>

      {/* Simple lightbox */}
      {openImg && (
        <div
          onClick={() => setOpenImg("")}
          className="fixed inset-0 bg-black/70 flex items-center justify-center z-50"
        >
          <img
            src={openImg}
            alt="post"
            className="max-h-[90vh] max-w-[90vw] rounded-lg shadow-lg"
          />
        </div>
      )}
    </div>
  );
}

/* === small presentational bits === */

function Stat({ label, value }) {
  return (
    <div className="py-3">
      <div className="text-xl font-bold text-[#8B6F47]">{value}</div>
      <div className="text-xs uppercase tracking-wide text-[#8B6F47]/70">
        {label}
      </div>
    </div>
  );
}

function EmptyState() {
  return (
    <div className="bg-white rounded-2xl shadow p-8 text-center text-[#8B6F47]/70">
      No posts yet. Tap <span className="font-semibold">+ New Post</span> to publish your first!
    </div>
  );
}

function SkeletonGrid() {
  return (
    <div className="grid grid-cols-2 md:grid-cols-3 gap-3 md:gap-4">
      {Array.from({ length: 6 }).map((_, i) => (
        <div
          key={i}
          className="aspect-square rounded-xl bg-[#000]/5 animate-pulse"
        />
      ))}
    </div>
  );
}

function PostTile({ post, onOpenImage }) {
  // image post
  if (post.imageUrl) {
    return (
      <button
        onClick={() => onOpenImage(post.imageUrl)}
        className="aspect-square rounded-xl overflow-hidden bg-white shadow hover:shadow-md transition"
      >
        <img
          src={post.imageUrl}
          alt={post.text || "post"}
          className="w-full h-full object-cover"
        />
      </button>
    );
  }

  // text-only post
  return (
    <div className="aspect-square rounded-xl bg-white shadow p-4 flex items-center justify-center text-center">
      <p className="text-[#8B6F47] line-clamp-5">{post.text}</p>
    </div>
  );
}







// src/pages/SettingsPage.js
// -------------------------------------------------------------
// SETTINGS PAGE (student-friendly version)
// What this page does:
// 1) Loads the current user's profile (email, display name, photo)
// 2) Lets the user change pet name + avatar and saves to:
//      - Firebase Auth (displayName, photoURL)
//      - Firestore: /users/{uid}
// 3) Shows a "View Profile" button that routes to /profile
// 4) Keeps "Logout" as a separate button at the bottom
// -------------------------------------------------------------

import React, { useEffect, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { auth, db, storage } from "../firebase";
import { useNavigate } from "react-router-dom";
import { updateProfile } from "firebase/auth";
import {
  doc,
  getDoc,
  setDoc,
  updateDoc,
  serverTimestamp,
} from "firebase/firestore";
import { ref as sref, uploadBytes, getDownloadURL } from "firebase/storage";

export default function SettingsPage() {
  // from our AuthContext (already wired to Firebase Auth user)
  const { user, logout } = useAuth();

  // for routing (View Profile)
  const navigate = useNavigate();

  // local UI state
  const [petName, setPetName] = useState("");
  const [email, setEmail] = useState("");
  const [photoURL, setPhotoURL] = useState(""); // current avatar URL
  const [file, setFile] = useState(null);       // chosen file (not yet uploaded)
  const [preview, setPreview] = useState("");   // object URL preview
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState("");
  const [ok, setOk] = useState("");

  // -----------------------------------------------------------
  // Load profile data on first render (both Auth + Firestore)
  // -----------------------------------------------------------
  useEffect(() => {
    if (!user) return;

    // start with Auth values so the page shows something fast
    setEmail(user.email || "");
    setPetName(user.displayName || "");
    setPhotoURL(user.photoURL || "");

    // then read Firestore users/{uid} (our app's source of truth)
    (async () => {
      try {
        const ref = doc(db, "users", user.uid);
        const snap = await getDoc(ref);

        if (snap.exists()) {
          const d = snap.data();
          if (d.displayName) setPetName(d.displayName);
          if (d.photoURL) setPhotoURL(d.photoURL);
        } else {
          // if the doc doesn't exist yet, create a minimal one
          await setDoc(ref, {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName || "",
            photoURL: user.photoURL || "",
            createdAt: serverTimestamp(),
          });
        }
      } catch (e) {
        console.warn("Load settings failed:", e);
      }
    })();

    // clean up preview URL if user leaves page
    return () => {
      if (preview) URL.revokeObjectURL(preview);
    };
    // we intentionally don't depend on `preview` here
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user]);

  // -----------------------------------------------------------
  // When user picks a new avatar file, show a local preview
  // -----------------------------------------------------------
  function onPick(e) {
    const f = e.target.files?.[0];
    if (!f) return;

    // cleanup old preview (avoid memory leak)
    if (preview) URL.revokeObjectURL(preview);

    setFile(f);
    const url = URL.createObjectURL(f);
    setPreview(url);
  }

  // -----------------------------------------------------------
  // Save: upload image (if any) + update Auth + update Firestore
  // -----------------------------------------------------------
  async function onSave(e) {
    e?.preventDefault?.();
    if (!user) return;

    setSaving(true);
    setError("");
    setOk("");

    try {
      let newPhotoURL = photoURL;

      // (A) Upload avatar to Storage if user picked a file
      if (file) {
        try {
          const path = `profile/${user.uid}/avatar.jpg`;
          const r = sref(storage, path);
          await uploadBytes(r, file);
          newPhotoURL = await getDownloadURL(r);
        } catch (err) {
          console.error("Avatar upload error:", err);
          throw new Error(
            `Avatar upload failed: ${err.code || ""} ${err.message || ""}`.trim()
          );
        }
      }

      // (B) Update Firebase Auth profile (what AuthContext reads)
      try {
        await updateProfile(auth.currentUser, {
          displayName: petName || "",
          photoURL: newPhotoURL || "",
        });
      } catch (err) {
        console.error("Auth updateProfile error:", err);
        throw new Error(
          `Auth profile update failed: ${err.code || ""} ${err.message || ""}`.trim()
        );
      }

      // (C) Update Firestore users/{uid} (what the rest of the app reads)
      try {
        await updateDoc(doc(db, "users", user.uid), {
          displayName: petName || "",
          photoURL: newPhotoURL || "",
          updatedAt: serverTimestamp(),
        });
      } catch (err) {
        console.error("Firestore updateDoc error:", err);
        throw new Error(
          `Firestore write failed: ${err.code || ""} ${err.message || ""}`.trim()
        );
      }

      // local UI updates
      setPhotoURL(newPhotoURL);
      setOk("Profile updated.");
      setFile(null);
      if (preview) URL.revokeObjectURL(preview);
      setPreview("");
    } catch (e2) {
      setError(e2.message || "Failed to update profile.");
    } finally {
      setSaving(false);
    }
  }

  // -----------------------------------------------------------
  // Render
  // -----------------------------------------------------------
  return (
    <div className="min-h-[calc(100vh-80px)] flex items-start justify-center p-6 bg-[#FFE7CC]">
      <form
        onSubmit={onSave}
        className="w-full max-w-md bg-white/90 rounded-2xl shadow-lg p-6"
      >
        <h2 className="text-2xl font-bold text-center mb-4">Settings</h2>

        {/* Avatar */}
        <div className="flex flex-col items-center mb-4">
          <div className="w-24 h-24 rounded-full overflow-hidden bg-[#F5F5F5] border">
            <img
              src={preview || photoURL || "https://i.pravatar.cc/96?img=3"}
              alt="avatar"
              className="w-full h-full object-cover"
            />
          </div>
          <label
            htmlFor="pick-avatar"
            className="mt-3 px-3 py-1 rounded-full text-sm bg-[#FFE7CC] text-[#8B6F47] border border-[#E2B887]/60 cursor-pointer"
          >
            Change Photo
          </label>
          <input
            id="pick-avatar"
            type="file"
            accept="image/*"
            className="hidden"
            onChange={onPick}
          />
        </div>

        {/* Pet Name */}
        <label className="block text-sm text-[#8B6F47] mb-1">Pet Name</label>
        <input
          value={petName}
          onChange={(e) => setPetName(e.target.value)}
          className="w-full px-4 py-3 border-2 border-orange-200 rounded-2xl focus:border-orange-400 focus:outline-none transition bg-white/80 backdrop-blur mb-3"
          placeholder="Your pet's name"
        />

        {/* Email (read-only) */}
        <label className="block text-sm text-[#8B6F47] mb-1">Email</label>
        <input
          value={email}
          readOnly
          className="w-full px-4 py-3 border-2 border-orange-100 rounded-2xl bg-gray-50 text-gray-500 mb-4"
        />

        {/* Messages */}
        {error && (
          <div className="mb-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-2xl px-4 py-2">
            {error}
          </div>
        )}
        {ok && (
          <div className="mb-3 text-sm text-green-700 bg-green-50 border border-green-200 rounded-2xl px-4 py-2">
            {ok}
          </div>
        )}

        {/* Save Changes */}
        <button
          type="submit"
          disabled={saving}
          className="w-full bg-[#E2B887] text-white py-3 rounded-2xl font-semibold hover:brightness-95 transition disabled:opacity-50"
        >
          {saving ? "Saving..." : "Save Changes"}
        </button>

        {/* NEW: View Profile (navigates to /profile) */}
        <button
          type="button"
          onClick={() => navigate("/profile")}
          className="w-full mt-3 bg-white border border-[#E2B887]/60 text-[#8B6F47] py-3 rounded-2xl font-semibold hover:bg-[#FFF4E6] transition"
        >
          View Profile
        </button>

        {/* Logout (separate button under the others) */}
        <button
          type="button"
          onClick={logout}
          className="w-full mt-4 bg-red-500 text-white py-3 rounded-2xl font-semibold hover:brightness-95 transition"
        >
          Logout
        </button>
      </form>
    </div>
  );
}