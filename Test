// src/pages/ProfilePage.js
// Clean IG-style profile page with Bio (no email), good alignment,
// and a robust grid that understands different post shapes.

import React, { useEffect, useMemo, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { useNavigate } from "react-router-dom";
import { db } from "../firebase";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  orderBy,
  query,
} from "firebase/firestore";

// ðŸ‘‰ helper: find a thumbnail in many possible post shapes
function getThumb(post) {
  // prefer array of images
  if (Array.isArray(post.images) && post.images[0]) return post.images[0];
  // common single-image fields
  if (post.imageUrl) return post.imageUrl;
  if (post.photoURL) return post.photoURL;
  if (post.thumbnail) return post.thumbnail;
  return null;
}

export default function ProfilePage() {
  const { user } = useAuth();
  const navigate = useNavigate();

  const [me, setMe] = useState(null);      // users/{uid}
  const [posts, setPosts] = useState([]);  // full posts

  useEffect(() => {
    if (!user) return;

    (async () => {
      // ---- Profile (Firestore is source of truth for displayName/photoURL/bio)
      const userSnap = await getDoc(doc(db, "users", user.uid));
      if (userSnap.exists()) {
        setMe(userSnap.data());
      } else {
        // Fallback (shouldnâ€™t happen because we create the doc on signup/settings)
        setMe({
          displayName: user.displayName || "My profile",
          photoURL: user.photoURL || "",
          bio: "",
          followersCount: 0,
          followingCount: 0,
        });
      }

      // ---- Post index -> fetch full post docs
      const q = query(
        collection(db, "users", user.uid, "posts"),
        orderBy("createdAt", "desc")
      );
      const idxSnap = await getDocs(q);
      const ids = idxSnap.docs.map((d) => d.id);

      const fullDocs = await Promise.all(ids.map((id) => getDoc(doc(db, "posts", id))));
      setPosts(
        fullDocs.filter((s) => s.exists()).map((s) => ({ id: s.id, ...s.data() }))
      );
    })();
  }, [user]);

  const stats = useMemo(
    () => ({
      posts: posts.length,
      followers: me?.followersCount ?? 0,
      following: me?.followingCount ?? 0,
    }),
    [posts.length, me]
  );

  if (!user) return null;

  return (
    <div className="max-w-4xl mx-auto">
      {/* ===== Header card ===== */}
      <section className="bg-white/90 rounded-2xl shadow p-6 md:p-8 mb-6">
        <div className="flex items-start gap-6 md:gap-8">
          {/* avatar */}
          <img
            src={me?.photoURL || "https://i.pravatar.cc/128?img=7"}
            alt="avatar"
            className="w-24 h-24 md:w-32 md:h-32 rounded-full object-cover ring-2 ring-[#E2B887]/50"
          />

          <div className="flex-1">
            {/* name + actions */}
            <div className="flex flex-col md:flex-row md:items-center md:gap-6">
              <h1 className="text-2xl md:text-3xl font-bold text-[#8B6F47] leading-tight">
                {me?.displayName || "Your profile"}
              </h1>

              <div className="mt-3 md:mt-0 flex gap-3">
                <button
                  onClick={() => navigate("/settings")}
                  className="px-4 py-2 rounded-xl bg-[#FFE7CC] text-[#8B6F47] border border-[#E2B887]/50 hover:bg-[#FFF2E1]"
                >
                  Edit Profile
                </button>
                <button
                  onClick={() => navigate("/chat")}
                  className="px-4 py-2 rounded-xl bg-white text-[#8B6F47] border border-[#E2B887]/50 hover:bg-[#FFF8EF]"
                >
                  Message
                </button>
              </div>
            </div>

            {/* stats */}
            <ul className="mt-3 flex gap-8 text-[#8B6F47]">
              <li><span className="font-semibold">{stats.posts}</span> <span className="opacity-70">posts</span></li>
              <li><span className="font-semibold">{stats.followers}</span> <span className="opacity-70">followers</span></li>
              <li><span className="font-semibold">{stats.following}</span> <span className="opacity-70">following</span></li>
            </ul>

            {/* bio (no email shown) */}
            <div className="mt-3 text-[#6f5a36]">
              {me?.bio ? (
                <p className="whitespace-pre-line">{me.bio}</p>
              ) : (
                <button
                  onClick={() => navigate("/settings")}
                  className="text-[#8B6F47] underline underline-offset-2"
                  title="Add a short bio in Settings"
                >
                  Add a short bio â†’
                </button>
              )}
            </div>
          </div>
        </div>
      </section>

      {/* ===== Posts grid ===== */}
      {posts.length === 0 ? (
        <div className="text-center text-[#8B6F47]/60">
          No posts yet. Use the <b>+</b> button to create one.
        </div>
      ) : (
        <section className="grid grid-cols-3 gap-2 md:gap-4">
          {posts.map((p) => {
            const thumb = getThumb(p);
            return (
              <div
                key={p.id}
                className="relative aspect-square overflow-hidden rounded-lg bg-white/70 ring-1 ring-[#E2B887]/30"
                title={p.text || "post"}
              >
                {thumb ? (
                  <img
                    src={thumb}
                    alt="post"
                    loading="lazy"
                    className="w-full h-full object-cover hover:scale-105 transition-transform"
                    onError={(e) => { e.currentTarget.style.opacity = 0.2; }}
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-[#8B6F47]/60 p-3 text-center">
                    {p.text?.slice(0, 40) || "Text post"}
                  </div>
                )}
              </div>
            );
          })}
        </section>
      )}
    </div>
  );
}