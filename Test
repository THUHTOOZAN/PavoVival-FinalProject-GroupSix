// components/Calendar.jsx
// fixed version: correct starting weekday and full 6x7 grid alignment

import React, { useMemo } from "react";

function pad(n) {
  return String(n).padStart(2, "0");
}

function ymd(date) {
  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;
}

const WEEKDAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

export default function Calendar({ year, month, events, onOpenDay }) {
  // Correct month logic
  const cells = useMemo(() => {
    // 1️⃣ Get first day of the month
    const firstOfMonth = new Date(year, month, 1);

    // 2️⃣ Find which day of week that is (0=Sun, 6=Sat)
    const firstWeekday = firstOfMonth.getDay();

    // 3️⃣ Calculate start date for the calendar grid
    // We go back to the previous Sunday (or same day if it's already Sunday)
    const startDate = new Date(firstOfMonth);
    startDate.setDate(firstOfMonth.getDate() - firstWeekday);

    // 4️⃣ Fill 42 days (6 weeks × 7 days)
    const days = [];
    for (let i = 0; i < 42; i++) {
      const d = new Date(startDate);
      d.setDate(startDate.getDate() + i);
      days.push(d);
    }

    return days;
  }, [year, month]);

  return (
    <section className="calendar">
      <div className="week-header">
        {WEEKDAYS.map((d) => (
          <div key={d} className="weekday">
            {d}
          </div>
        ))}
      </div>

      <div className="grid">
        {cells.map((dateObj) => {
          const inMonth = dateObj.getMonth() === month;
          const dateStr = ymd(dateObj);
          const dayNum = dateObj.getDate();
          const hasEvents = events[dateStr]?.length > 0;

          return (
            <button
              key={dateStr}
              className={`day ${inMonth ? "" : "muted"} ${hasEvents ? "has" : ""}`}
              onClick={() => onOpenDay(dateObj)}
              title={inMonth ? "add/view events" : "outside current month"}
            >
              <div className="day-number">{dayNum}</div>

              <div className="chips">
                {(events[dateStr] ?? []).slice(0, 2).map((e) => (
                  <span key={e.id} className="chip">
                    {e.time ? e.time : "•"} {e.title.slice(0, 8)}
                  </span>
                ))}
                {(events[dateStr]?.length ?? 0) > 2 && (
                  <span className="chip more">
                    +{events[dateStr].length - 2}
                  </span>
                )}
              </div>
            </button>
          );
        })}
      </div>
    </section>
  );
}









/* index.css – monochrome + white neon glow (student-friendly) */

:root{
  /* core palette (no color, just b/w) */
  --bg: #0a0a0a;          /* page background (almost black) */
  --panel: #111214;       /* cards/panels */
  --panel-2:#0e0f12;
  --text: #f2f2f2;        /* main text (bright!) */
  --muted:#b6b6b6;        /* secondary text (still readable) */
  --line:#27292f;         /* thin lines / borders */

  /* keep these names so old CSS still works, but make them WHITE */
  --neon:#ffffff;         /* white neon */
  --neon2:#ffffff;        /* also white */
  /* glow stack tuned for readability (not crazy bright) */
  --glow: 0 0 6px rgba(255,255,255,.35), 0 0 14px rgba(255,255,255,.25);
  --glow-strong: 0 0 10px rgba(255,255,255,.55), 0 0 22px rgba(255,255,255,.35);

  --danger:#ff4d4d;       /* delete icon can stay red so it stands out */
}

* { box-sizing: border-box; }
html, body, #root { height: 100%; }

body {
  margin: 0;
  background: radial-gradient(1200px 800px at 50% -10%, #14151a 0%, var(--bg) 45%, #070709 100%);
  color: var(--text);
  font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

/* shell */
.app-shell { max-width: 980px; margin: 24px auto 48px; padding: 0 16px; }

/* title */
.neon-title {
  display: flex; gap: 12px; align-items: baseline;
  font-size: 28px; letter-spacing: 1px; text-transform: lowercase;
  text-shadow: var(--glow);
}
.neon-title .tiny { font-size: 14px; color: var(--muted); text-shadow: none; }

/* controls */
.controls .row { display: flex; gap: 8px; margin: 16px 0 10px; flex-wrap: wrap; }

.btn {
  background: #121316;
  color: var(--text);
  border: 1px solid rgba(255,255,255,.25);
  padding: 8px 12px;
  cursor: pointer;
  text-transform: lowercase;
  letter-spacing: .5px;
  box-shadow: var(--glow);
  transition: transform .05s ease-in-out, box-shadow .18s, border-color .18s;
  image-rendering: pixelated;
}
.btn:hover   { transform: translateY(-1px); box-shadow: var(--glow-strong); border-color: rgba(255,255,255,.55); }
.btn:active  { transform: translateY(0); }
.btn.primary { border-color: rgba(255,255,255,.55); box-shadow: var(--glow-strong); }

.icon-btn {
  background: #121316;
  border: 1px solid rgba(255,255,255,.2);
  color: var(--text);
  padding: 6px 8px;
  cursor: pointer;
}
.icon-btn:hover { border-color: rgba(255,255,255,.6); box-shadow: 0 0 8px rgba(255,255,255,.35); }
.icon-btn.danger { border-color: var(--danger); color: var(--danger); }

/* calendar container */
.calendar {
  border: 1px solid rgba(255,255,255,.35);
  border-radius: 8px;
  padding: 12px;
  background: linear-gradient(180deg, rgba(255,255,255,0.05), rgba(255,255,255,0.02));
  box-shadow: var(--glow);
}

/* weekday header */
.week-header {
  display: grid; grid-template-columns: repeat(7, 1fr);
  gap: 6px; margin-bottom: 6px;
}
.weekday {
  text-align: center; font-size: 12px; color: var(--muted);
  border-bottom: 1px dashed var(--line); padding-bottom: 6px;
}

/* grid of days */
.grid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 6px;
}

.day {
  background: var(--panel);
  min-height: 96px;      /* a bit taller + readable in bright places */
  border: 1px solid #1f222b;
  border-radius: 6px;
  padding: 8px;
  text-align: left;
  position: relative;
  overflow: hidden;
  cursor: pointer;
}
.day:hover {
  border-color: rgba(255,255,255,.65);
  box-shadow: 0 0 10px rgba(255,255,255,.35);
}
.day.muted { opacity: .62; }           /* outside month but still readable */
.day.has { outline: 1px dashed rgba(255,255,255,.45); }

/* day number is larger + high contrast */
.day-number {
  font-weight: 800;
  font-size: 16px;
  letter-spacing: .2px;
  color: #fff;
  opacity: .95;
}

/* small event chips */
.chips {
  margin-top: 10px; display: flex; gap: 4px; flex-wrap: wrap;
}
.chip {
  font-size: 11px; padding: 2px 6px;
  border: 1px solid rgba(255,255,255,.35);
  border-radius: 4px;
  background: rgba(255,255,255,.06);
  color: #eee;
  white-space: nowrap; text-overflow: ellipsis; overflow: hidden;
  max-width: 100%;
}
.chip.more {
  border-style: dashed; background: rgba(255,255,255,.09);
}

/* modal */
.modal-backdrop {
  position: fixed; inset: 0; background: rgba(0,0,0,.65);
  display: grid; place-items: center; padding: 16px; z-index: 1000;
}
.modal {
  width: min(720px, 100%);
  background: var(--panel-2);
  border: 1px solid rgba(255,255,255,.45);
  border-radius: 10px;
  box-shadow: var(--glow-strong);
  padding: 12px;
}
.modal-head { display: flex; align-items: center; justify-content: space-between; margin-bottom: 6px; }
.modal-title { margin: 0; font-weight: 800; letter-spacing: .5px; text-shadow: var(--glow); }

/* form */
.event-form { display: grid; gap: 10px; margin: 8px 0 12px; }
.field { display: grid; gap: 6px; }
.field > span { font-size: 12px; color: var(--muted); }
.field input, .field textarea {
  background: #0d0f13;
  color: var(--text);
  border: 1px solid #232633;
  border-radius: 6px;
  padding: 10px 12px;
  outline: none;
}
.field input:focus, .field textarea:focus {
  border-color: rgba(255,255,255,.65);
  box-shadow: 0 0 10px rgba(255,255,255,.35);
}

/* event list */
.list { display: grid; gap: 8px; }
.item {
  display: flex; gap: 10px; align-items: flex-start;
  padding: 8px;
  border: 1px dashed var(--line);
  border-radius: 6px;
  background: #0c0e12;
}
.bullet {
  width: 10px; height: 10px; margin-top: 6px;
  border: 1px solid rgba(255,255,255,.65);
  box-shadow: var(--glow);
}
.grow { flex: 1; min-width: 0; }
.title { font-weight: 700; font-size: 14px; color: #fff; }
.notes { color: var(--muted); font-size: 12px; margin-top: 2px; }

/* small screens */
@media (max-width: 640px) {
  .day { min-height: 78px; }
  .neon-title { font-size: 22px; }
}




# make a new vite react app
npm create vite@latest calendar-student -- --template react
cd calendar-student
npm install
# drop the files below into /src (overwrite existing), then:
npm run dev



// main.jsx
// booting the React app (vite already points index.html to this)
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


....




// App.jsx
// note: i'm keeping this simple on purpose so future-me (and classmates) can read it.
// events are stored in localStorage (so if i refresh, stuff stays). later i'll swap to Firebase.

import React, { useEffect, useMemo, useState } from "react";
import Calendar from "./components/Calendar.jsx";
import EventModal from "./components/EventModal.jsx";

// tiny helper so i don't mess up date strings (local TZ, not UTC)
function pad(n) { return String(n).padStart(2, "0"); }
function ymd(date) {
  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;
}

export default function App() {
  const [viewDate, setViewDate] = useState(() => {
    // start on the 1st of the current month (makes math easier)
    const now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), 1);
  });

  const [events, setEvents] = useState(() => {
    // localStorage key (change version if i change structure)
    const raw = localStorage.getItem("calendar-events-v1");
    return raw ? JSON.parse(raw) : {}; // shape: { "YYYY-MM-DD": [ {id,title,time,notes} ] }
  });

  useEffect(() => {
    localStorage.setItem("calendar-events-v1", JSON.stringify(events));
  }, [events]);

  // modal state
  const [open, setOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null); // a Date object

  const month = viewDate.getMonth();
  const year = viewDate.getFullYear();

  const monthLabel = useMemo(() => {
    return new Intl.DateTimeFormat("en", { month: "long", year: "numeric" }).format(viewDate);
  }, [viewDate]);

  function goPrevMonth() {
    setViewDate(d => new Date(d.getFullYear(), d.getMonth() - 1, 1));
  }
  function goNextMonth() {
    setViewDate(d => new Date(d.getFullYear(), d.getMonth() + 1, 1));
  }
  function decYear() {
    setViewDate(d => new Date(d.getFullYear() - 1, d.getMonth(), 1));
  }
  function incYear() {
    setViewDate(d => new Date(d.getFullYear() + 1, d.getMonth(), 1));
  }
  function goToday() {
    const t = new Date();
    setViewDate(new Date(t.getFullYear(), t.getMonth(), 1));
  }

  function openDay(dateObj) {
    setSelectedDate(dateObj);
    setOpen(true);
  }

  function addEvent(dateStr, newEvent) {
    setEvents(prev => {
      const list = prev[dateStr] ? [...prev[dateStr], newEvent] : [newEvent];
      return { ...prev, [dateStr]: list };
    });
  }

  function deleteEvent(dateStr, id) {
    setEvents(prev => {
      const list = prev[dateStr]?.filter(e => e.id !== id) ?? [];
      const copy = { ...prev };
      if (list.length === 0) {
        delete copy[dateStr];
        return copy;
      }
      return { ...prev, [dateStr]: list };
    });
  }

  // this is where i'd wire up Firebase later (i left a stub so i don't forget):
  // async function saveToFirebase(uid, events) { ... }  // TODO later
  // async function loadFromFirebase(uid) { ... }        // TODO later

  return (
    <div className="app-shell">
      <header className="neon-title">
        {/* looks “pixel-ish” + neon, still readable */}
        <span className="tiny">student calendar —</span> <span>{monthLabel}</span>
      </header>

      <div className="controls">
        <div className="row">
          <button className="btn" onClick={decYear} title="Year -1">« year</button>
          <button className="btn" onClick={goPrevMonth} title="Month -1">‹ month</button>
          <button className="btn" onClick={goToday} title="Jump to current month">today</button>
          <button className="btn" onClick={goNextMonth} title="Month +1">month ›</button>
          <button className="btn" onClick={incYear} title="Year +1">year »</button>
        </div>
      </div>

      <Calendar
        year={year}
        month={month}
        events={events}
        onOpenDay={openDay}
      />

      <EventModal
        open={open}
        date={selectedDate}
        onClose={() => setOpen(false)}
        onAdd={(payload) => {
          const d = ymd(selectedDate);
          const newEvent = { id: crypto.randomUUID(), ...payload };
          addEvent(d, newEvent);
        }}
        onDelete={(eventId) => {
          const d = ymd(selectedDate);
          deleteEvent(d, eventId);
        }}
        dayEvents={selectedDate ? (events[ymd(selectedDate)] ?? []) : []}
      />

      <footer className="hint">
        {/* friend vibes */}
        <p>// stored locally for now — swap to Firebase later where the TODO is 👆</p>
      </footer>
    </div>
  );
}



......




// components/Calendar.jsx
// this draws the grid of days. if i click a day -> open modal to add events.

import React, { useMemo } from "react";

function pad(n) { return String(n).padStart(2, "0"); }
function ymd(date) {
  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;
}

const WEEKDAYS = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];

export default function Calendar({ year, month, events, onOpenDay }) {
  // build a 6x7 matrix (classic wall calendar style)
  const cells = useMemo(() => {
    const firstOfMonth = new Date(year, month, 1);
    const firstWeekday = firstOfMonth.getDay(); // 0..6 (Sun..Sat)
    // start from the Sunday before (or the day itself if Sunday)
    const start = new Date(year, month, 1 - firstWeekday);
    const arr = [];
    for (let i = 0; i < 42; i++) {
      const d = new Date(start.getFullYear(), start.getMonth(), start.getDate() + i);
      arr.push(d);
    }
    return arr;
  }, [year, month]);

  const thisMonth = month;

  return (
    <section className="calendar">
      <div className="week-header">
        {WEEKDAYS.map(d => (
          <div key={d} className="weekday">{d}</div>
        ))}
      </div>

      <div className="grid">
        {cells.map((dateObj) => {
          const inMonth = dateObj.getMonth() === thisMonth;
          const dateStr = ymd(dateObj);
          const dayNum = dateObj.getDate();
          const has = events[dateStr]?.length > 0;

          return (
            <button
              key={dateStr}
              className={`day ${inMonth ? "" : "muted"} ${has ? "has" : ""}`}
              onClick={() => onOpenDay(dateObj)}
              title={inMonth ? "add/view events" : "this day is outside the current month"}
            >
              <div className="day-number">{dayNum}</div>

              {/* show up to 2 small labels so i know something is there */}
              <div className="chips">
                {(events[dateStr] ?? []).slice(0, 2).map(e => (
                  <span key={e.id} className="chip" data-title={e.title}>
                    {/* just the first 8 chars to keep it tidy */}
                    {e.time ? e.time : "•"} {e.title.slice(0, 8)}
                  </span>
                ))}
                {(events[dateStr]?.length ?? 0) > 2 && (
                  <span className="chip more">+{events[dateStr].length - 2}</span>
                )}
              </div>
            </button>
          );
        })}
      </div>
    </section>
  );
}





.....



// components/EventModal.jsx
// the small popup to add + list events on a chosen day
// i kept the form tiny on purpose (title/time/notes). delete uses the trash button.

import React, { useMemo, useRef, useState } from "react";

function pad(n) { return String(n).padStart(2, "0"); }

export default function EventModal({ open, date, onClose, onAdd, onDelete, dayEvents }) {
  const [title, setTitle] = useState("");
  const [time, setTime]   = useState("");
  const [notes, setNotes] = useState("");
  const dialogRef = useRef(null);

  const friendly = useMemo(() => {
    if (!date) return "";
    const y = date.getFullYear();
    const m = date.toLocaleString("en", { month: "long" });
    const d = pad(date.getDate());
    return `${m} ${d}, ${y}`;
  }, [date]);

  // reset fields whenever i open on a new day
  React.useEffect(() => {
    if (open) {
      setTitle("");
      setTime("");
      setNotes("");
    }
  }, [open, date]);

  if (!open) return null;

  return (
    <div className="modal-backdrop" onClick={onClose}>
      <div className="modal" onClick={(e) => e.stopPropagation()} ref={dialogRef}>
        <div className="modal-head">
          <h3 className="modal-title">events on {friendly}</h3>
          <button className="icon-btn" onClick={onClose} aria-label="Close">✕</button>
        </div>

        <form className="event-form" onSubmit={(e) => {
          e.preventDefault();
          if (!title.trim()) return;
          onAdd({ title: title.trim(), time: time.trim(), notes: notes.trim() });
          setTitle(""); setTime(""); setNotes("");
        }}>
          <label className="field">
            <span>title</span>
            <input
              placeholder="exam / lecture / birthday"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
          </label>

          <label className="field">
            <span>time (optional)</span>
            <input
              type="time"
              value={time}
              onChange={(e) => setTime(e.target.value)}
            />
          </label>

          <label className="field">
            <span>notes (optional)</span>
            <textarea
              rows={3}
              placeholder="room, link, what to bring..."
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
            />
          </label>

          <div className="row">
            <button className="btn primary" type="submit">add event</button>
            <button className="btn" type="button" onClick={onClose}>close</button>
          </div>
        </form>

        <div className="list">
          {dayEvents.length === 0 && <p className="empty">// no events yet</p>}
          {dayEvents.map(ev => (
            <div key={ev.id} className="item">
              <div className="bullet" />
              <div className="grow">
                <div className="title">
                  {ev.time ? `${ev.time} — ` : ""}{ev.title}
                </div>
                {ev.notes && <div className="notes">{ev.notes}</div>}
              </div>
              <button
                className="icon-btn danger"
                title="delete"
                onClick={() => onDelete(ev.id)}
                aria-label="Delete"
              >🗑</button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

.........



/* index.css
   theme: black & white with neon pixel gaming vibe (no external fonts, so i faked it w/ monospace + glow)
   comments are friendly so future-me remembers why i did stuff :)
*/

:root{
  --bg: #0b0c0f;        /* super dark */
  --panel: #111319;     /* slightly lighter dark */
  --text: #f1f5f9;      /* readable white-ish */
  --muted: #98a2b3;     /* dim text */
  --neon: #39ff14;      /* neon green (gamer vibe) */
  --neon2:#ff2bd6;      /* neon pink for accents */
  --line: #222633;      /* grid lines */
  --danger:#ff4d4d;
  --shadow: 0 0 8px var(--neon), 0 0 16px color-mix(in srgb, var(--neon) 60%, transparent);
}

* { box-sizing: border-box; }
html, body, #root { height: 100%; }
body {
  margin: 0;
  background: radial-gradient(1200px 800px at 50% -10%, #161a20 0%, var(--bg) 40%, #05060a 100%);
  color: var(--text);
  font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

.app-shell {
  max-width: 980px;
  margin: 24px auto 48px;
  padding: 0 16px;
}

.neon-title {
  display: flex;
  gap: 12px;
  align-items: baseline;
  font-size: 28px;
  letter-spacing: 1px;
  text-transform: lowercase;
  text-shadow: var(--shadow);
}
.neon-title .tiny { font-size: 14px; color: var(--muted); text-shadow: none; }

.controls .row {
  display: flex;
  gap: 8px;
  margin: 16px 0 10px;
  flex-wrap: wrap;
}

.btn {
  background: #0e1117;
  color: var(--text);
  border: 2px solid var(--neon);
  padding: 8px 12px;
  cursor: pointer;
  text-transform: lowercase;
  letter-spacing: 0.5px;
  box-shadow: var(--shadow);
  transition: transform .05s ease-in-out, box-shadow .2s;
  image-rendering: pixelated; /* tiny pixel feel */
}
.btn:hover { transform: translateY(-1px); box-shadow: 0 0 12px var(--neon); }
.btn:active { transform: translateY(0); }
.btn.primary { border-color: var(--neon2); box-shadow: 0 0 8px var(--neon2); }

.icon-btn {
  background: #0e1117;
  border: 2px solid var(--line);
  color: var(--text);
  padding: 6px 8px;
  cursor: pointer;
}
.icon-btn:hover { border-color: var(--neon); }
.icon-btn.danger { border-color: var(--danger); color: var(--danger); }

.hint { color: var(--muted); margin-top: 16px; }

/* calendar layout */
.calendar {
  border: 2px solid var(--neon);
  border-radius: 8px;
  padding: 12px;
  background: linear-gradient(180deg, rgba(57,255,20,0.06), rgba(255,43,214,0.06));
  box-shadow: var(--shadow);
}

.week-header {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 6px;
  margin-bottom: 6px;
}
.weekday {
  text-align: center;
  font-size: 12px;
  color: var(--muted);
  border-bottom: 1px dashed var(--line);
  padding-bottom: 6px;
}

.grid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 6px;
}

.day {
  background: var(--panel);
  min-height: 88px;
  border: 2px solid #1a2030;
  border-radius: 6px;
  padding: 6px;
  text-align: left;
  position: relative;
  overflow: hidden;
  cursor: pointer;
}
.day:hover {
  border-color: var(--neon);
  box-shadow: 0 0 8px var(--neon);
}
.day.muted { filter: grayscale(100%) brightness(0.7); }
.day.has { outline: 2px dashed color-mix(in srgb, var(--neon) 40%, transparent); }

.day-number {
  font-weight: 700;
  font-size: 14px;
  opacity: 0.9;
}

.chips {
  margin-top: 8px;
  display: flex;
  gap: 4px;
  flex-wrap: wrap;
}
.chip {
  font-size: 11px;
  padding: 2px 6px;
  border: 1px solid var(--neon2);
  border-radius: 4px;
  background: rgba(255,43,214,0.08);
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: 100%;
}
.chip.more {
  border-color: var(--neon);
  background: rgba(57,255,20,0.08);
}

/* modal styles */
.modal-backdrop {
  position: fixed; inset: 0;
  background: rgba(0,0,0,0.6);
  display: grid; place-items: center;
  padding: 16px;
  z-index: 1000;
}
.modal {
  width: min(720px, 100%);
  background: #0f1218;
  border: 2px solid var(--neon2);
  border-radius: 10px;
  box-shadow: 0 0 16px var(--neon2);
  padding: 12px;
}
.modal-head {
  display: flex; align-items: center; justify-content: space-between;
  margin-bottom: 6px;
}
.modal-title {
  margin: 0;
  text-shadow: 0 0 6px var(--neon2);
  font-weight: 700;
  letter-spacing: .5px;
}

.event-form {
  display: grid;
  gap: 10px;
  margin: 8px 0 12px;
}
.field { display: grid; gap: 6px; }
.field > span { font-size: 12px; color: var(--muted); }
.field input, .field textarea {
  background: #0c0f14;
  color: var(--text);
  border: 2px solid #1f2433;
  border-radius: 6px;
  padding: 8px 10px;
  outline: none;
}
.field input:focus, .field textarea:focus {
  border-color: var(--neon);
  box-shadow: 0 0 8px var(--neon);
}

.list { display: grid; gap: 8px; }
.item {
  display: flex; gap: 10px; align-items: flex-start;
  padding: 8px;
  border: 1px dashed var(--line);
  border-radius: 6px;
  background: #0b0e13;
}
.bullet {
  width: 10px; height: 10px; margin-top: 6px;
  border: 2px solid var(--neon);
  box-shadow: var(--shadow);
}
.grow { flex: 1; min-width: 0; }
.title { font-weight: 700; font-size: 14px; }
.notes { color: var(--muted); font-size: 12px; margin-top: 2px; }

/* small screens */
@media (max-width: 640px) {
  .day { min-height: 72px; }
  .neon-title { font-size: 22px; }
}


.....