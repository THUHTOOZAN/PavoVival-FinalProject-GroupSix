// src/pages/ChatPage.js
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useAuth } from "../context/AuthContext";
import { db } from "../firebase";
import {
  collection,
  doc,
  getDocs,
  onSnapshot,
  orderBy,
  query,
  serverTimestamp,
  setDoc,
  addDoc,
  updateDoc,
  where,
  writeBatch,
} from "firebase/firestore";
import { Send } from "lucide-react"; // or replace with text "Send"

// helpers
const chatIdFor = (a, b) => [a, b].sort().join("_");
const debounce = (fn, ms = 600) => {
  let t;
  return (...args) => {
    clearTimeout(t);
    t = setTimeout(() => fn(...args), ms);
  };
};
// format time WITHOUT seconds
const formatTime = (d) =>
  d ? new Date(d).toLocaleTimeString([], { hour: "numeric", minute: "2-digit" }) : "";

export default function ChatPage() {
  const { user } = useAuth();

  // left list
  const [allUsers, setAllUsers] = useState([]);

  // selection
  const [selectedChatUser, setSelectedChatUser] = useState(null);
  const [activeChatId, setActiveChatId] = useState(null);

  // messages
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const messagesEndRef = useRef(null);

  // typing
  const [isOtherTyping, setIsOtherTyping] = useState(false);

  // load users (exclude me)
  useEffect(() => {
    if (!user) return;
    (async () => {
      const snap = await getDocs(collection(db, "users"));
      const list = snap.docs
        .map((d) => ({ id: d.id, ...d.data() }))
        .filter((u) => u.uid !== user.uid);
      setAllUsers(list);
    })();
  }, [user]);

  // ensure chat + open
  async function openChatWith(other) {
    if (!user || !other?.uid) return;

    const id = chatIdFor(user.uid, other.uid);
    setSelectedChatUser(other);
    setActiveChatId(id);

    await setDoc(
      doc(db, "chats", id),
      {
        members: [user.uid, other.uid],
        createdAt: serverTimestamp(),
        lastMessage: "",
        lastMessageAt: serverTimestamp(),
      },
      { merge: true }
    );

    // mark seen immediately
    markSeen(id, user.uid).catch(() => {});
  }

  // live messages
  useEffect(() => {
    if (!activeChatId) return;

    const q = query(
      collection(db, "chats", activeChatId, "messages"),
      orderBy("createdAt", "asc")
    );

    const unsub = onSnapshot(q, (snap) => {
      const rows = snap.docs.map((d) => {
        const data = d.data();
        return {
          id: d.id,
          ...data,
          _ts: data.createdAt?.toDate ? data.createdAt.toDate() : new Date(),
          seenBy: Array.isArray(data.seenBy) ? data.seenBy : [],
        };
      });
      setMessages(rows);

      // scroll
      setTimeout(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 0);

      // mark seen
      if (activeChatId && user) {
        markSeen(activeChatId, user.uid).catch(() => {});
      }
    });

    return unsub;
  }, [activeChatId, user]);

  // listen to typing map on chat doc (anyone except me)
  useEffect(() => {
    if (!activeChatId || !user) return;
    const chatRef = doc(db, "chats", activeChatId);
    const unsub = onSnapshot(chatRef, (snap) => {
      const typing = snap.data()?.typing || {};
      const otherTyping = Object.keys(typing).some(
        (uid) => uid !== user.uid && typing[uid] === true
      );
      setIsOtherTyping(otherTyping);
    });
    return unsub;
  }, [activeChatId, user]);

  // seen receipts
  async function markSeen(chatId, myUid) {
    const msgsQ = query(
      collection(db, "chats", chatId, "messages"),
      where("senderId", "!=", myUid)
    );
    const snap = await getDocs(msgsQ);
    if (snap.empty) return;

    const batch = writeBatch(db);
    snap.forEach((d) => {
      const data = d.data();
      const seenBy = Array.isArray(data.seenBy) ? data.seenBy : [];
      if (!seenBy.includes(myUid)) {
        batch.update(d.ref, { seenBy: [...seenBy, myUid] });
      }
    });
    await batch.commit();
  }

  // send message
  async function handleSendMessage(e) {
    e?.preventDefault?.();
    if (!newMessage.trim() || !activeChatId || !user) return;

    const text = newMessage.trim();
    setNewMessage("");

    // stop typing
    updateDoc(doc(db, "chats", activeChatId), {
      [`typing.${user.uid}`]: false,
    }).catch(() => {});

    // add message (include my uid in seenBy)
    await addDoc(collection(db, "chats", activeChatId, "messages"), {
      senderId: user.uid,
      text,
      createdAt: serverTimestamp(),
      seenBy: [user.uid],
    });

    await updateDoc(doc(db, "chats", activeChatId), {
      lastMessage: text,
      lastMessageAt: serverTimestamp(),
    });
  }

  // debounced stop typing
  const debouncedStopTyping = useMemo(
    () =>
      debounce(() => {
        if (activeChatId && user) {
          updateDoc(doc(db, "chats", activeChatId), {
            [`typing.${user.uid}`]: false,
          }).catch(() => {});
        }
      }, 1000),
    [activeChatId, user]
  );

  // UI
  return (
    <div className="flex h-[calc(100vh-80px)] bg-white rounded-2xl shadow overflow-hidden">
      {/* Left: users */}
      <div className="w-1/3 border-r border-[#E2B887]/30 p-4 overflow-y-auto">
        <h2 className="text-lg font-bold text-[#8B6F47] mb-3">Messages</h2>
        {allUsers.length === 0 ? (
          <p className="text-[#8B6F47]/60">No other users yet.</p>
        ) : (
          <ul className="space-y-2">
            {allUsers.map((u) => (
              <li key={u.uid}>
                <button
                  onClick={() => openChatWith(u)}
                  className={`w-full flex items-center gap-3 p-2 rounded-lg hover:bg-[#FFF4E6] transition ${
                    selectedChatUser?.uid === u.uid ? "bg-[#FFF4E6]" : ""
                  }`}
                >
                  <img
                    src={u.photoURL || "https://i.pravatar.cc/48?img=1"}
                    alt={u.displayName || u.email || "user"}
                    className="w-10 h-10 rounded-full object-cover"
                  />
                  <div className="text-left">
                    <div className="text-[#8B6F47] font-semibold">
                      {u.displayName || u.email}
                    </div>
                    <div className="text-xs text-[#8B6F47]/60">{u.email}</div>
                  </div>
                </button>
              </li>
            ))}
          </ul>
        )}
      </div>

      {/* Right: chat window */}
      <div className="w-2/3 flex flex-col">
        {selectedChatUser ? (
          <>
            <div className="bg-[#F5F5F5] p-4 border-b border-[#E2B887]/30 flex items-center space-x-3">
              <img
                src={selectedChatUser.photoURL || "https://i.pravatar.cc/40?img=2"}
                alt={
                  selectedChatUser.displayName ||
                  selectedChatUser.petName ||
                  "user"
                }
                className="w-10 h-10 rounded-full object-cover"
              />
              <h3 className="text-xl font-bold text-[#8B6F47]">
                {selectedChatUser.petName ||
                  selectedChatUser.displayName ||
                  selectedChatUser.email}
              </h3>
              {isOtherTyping && (
                <span className="text-xs text-[#8B6F47]/70 ml-2">typingâ€¦</span>
              )}
            </div>

            <div className="flex-1 p-4 overflow-y-auto space-y-4">
              {messages.length === 0 ? (
                <p className="text-center text-[#8B6F47]/60">
                  Start a conversation!
                </p>
              ) : (
                messages.map((msg) => (
                  <div
                    key={msg.id}
                    className={`flex ${
                      msg.senderId === user.uid ? "justify-end" : "justify-start"
                    }`}
                  >
                    <div
                      className={`max-w-[70%] p-3 rounded-xl ${
                        msg.senderId === user.uid
                          ? "bg-[#E2B887] text-white"
                          : "bg-[#F5F5F5] text-[#8B6F47]"
                      }`}
                    >
                      <p>{msg.text}</p>
                      <span className="text-xs opacity-70 mt-1 block">
                        {formatTime(msg._ts)}
                      </span>

                      {/* Seen indicator (my messages only) */}
                      {msg.senderId === user.uid &&
                        Array.isArray(msg.seenBy) &&
                        msg.seenBy.length > 1 && (
                          <span className="text-[10px] opacity-70 mt-1 block text-right">
                            Seen
                          </span>
                        )}
                    </div>
                  </div>
                ))
              )}
              <div ref={messagesEndRef} />
            </div>

            <form
              onSubmit={handleSendMessage}
              className="p-4 border-t border-[#E2B887]/30 flex items-center space-x-3"
            >
              <input
                type="text"
                value={newMessage}
                onChange={(e) => {
                  setNewMessage(e.target.value);
                  if (activeChatId && user) {
                    updateDoc(doc(db, "chats", activeChatId), {
                      [`typing.${user.uid}`]: true,
                    }).catch(() => {});
                    debouncedStopTyping();
                  }
                }}
                placeholder="Type a message..."
                className="flex-1 p-3 border border-[#E2B887]/50 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E2B887] text-[#8B6F47] placeholder-[#8B6F47]/50"
              />
              <button
                type="submit"
                className="bg-[#E2B887] text-white p-3 rounded-full hover:bg-[#D4A77C] transition-colors"
                title="Send"
              >
                <Send className="w-6 h-6" />
              </button>
            </form>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center text-center text-[#8B6F47]/60">
            <p className="text-xl">Select a chat to start messaging</p>
          </div>
        )}
      </div>
    </div>
  );
}