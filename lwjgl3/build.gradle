// --- LWJGL3 (desktop) module build.gradle ---

plugins {
  id "application"
  id "io.github.fourlastor.construo" version "1.7.1"
}

import io.github.fourlastor.construo.Target

// resources come from /assets
sourceSets.main.resources.srcDirs += [ rootProject.file("assets").path ]

// application main class
application {
  mainClass = "com.g6.pavovival.lwjgl3.Lwjgl3Launcher"
}

eclipse.project.name = appName + "-lwjgl3"

// Java 8 target (your file already uses this)
java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}
tasks.withType(JavaCompile).configureEach {
  if (JavaVersion.current().isJava9Compatible()) options.release.set(8)
}


dependencies {
  implementation project(":core")
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
}

// -------- RUN CONFIG --------
def os = System.properties['os.name'].toLowerCase()
run {
  workingDir = rootProject.file("assets").path
  if (os.contains("mac")) jvmArgs += "-XstartOnFirstThread"
}

// -------- JAR TASKS (unchanged from your file) --------
jar {
  archiveFileName.set("${appName}-${projectVersion}.jar")
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude("META-INF/INDEX.LIST", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
  dependencies { exclude("META-INF/INDEX.LIST", "META-INF/maven/") }
  manifest {
    attributes "Main-Class": application.mainClass, "Enable-Native-Access": "ALL-UNNAMED"
  }
  doLast { file(archiveFile).setExecutable(true, false) }
}

tasks.register("jarMac") {
  dependsOn("jar"); group("build")
  jar.archiveFileName.set("${appName}-${projectVersion}-mac.jar")
  jar.exclude("windows/x86/", "windows/x64/", "linux/arm32/", "linux/arm64/", "linux/x64/", "/*.dll", "/*.so",
    "META-INF/INDEX.LIST", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
  dependencies { jar.exclude("windows/x86/", "windows/x64/", "linux/arm32/", "linux/arm64/", "linux/x64/",
    "META-INF/INDEX.LIST", "META-INF/maven/") }
}
tasks.register("jarLinux") {
  dependsOn("jar"); group("build")
  jar.archiveFileName.set("${appName}-${projectVersion}-linux.jar")
  jar.exclude("windows/x86/", "windows/x64/", "macos/arm64/", "macos/x64/", "/*.dll", "/*.dylib",
    "META-INF/INDEX.LIST", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
  dependencies { jar.exclude("windows/x86/", "windows/x64/", "macos/arm64/", "macos/x64/",
    "META-INF/INDEX.LIST", "META-INF/maven/") }
}
tasks.register("jarWin") {
  dependsOn("jar"); group("build")
  jar.archiveFileName.set("${appName}-${projectVersion}-win.jar")
  jar.exclude("macos/arm64/", "macos/x64/", "linux/arm32/", "linux/arm64/", "linux/x64/", "/*.dylib", "/*.so",
    "META-INF/INDEX.LIST", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA")
  dependencies { jar.exclude("macos/arm64/", "macos/x64/", "linux/arm32/", "linux/arm64/", "linux/x64/",
    "META-INF/INDEX.LIST", "META-INF/maven/") }
}

// Construo native bundles
construo {
  name.set(appName)
  humanName.set(appName)
  version.set("$projectVersion")
  targets.configure {
    register("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_linux_hotspot_17.0.15_6.tar.gz")
    }
    register("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.15_6.tar.gz")
      identifier.set("com.g6.pavovival." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }
    register("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_mac_hotspot_17.0.15_6.tar.gz")
      identifier.set("com.g6.pavovival." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }
    register("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      icon.set(project.file("icons/logo.png"))
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.15%2B6/OpenJDK17U-jdk_x64_windows_hotspot_17.0.15_6.zip")
      // useConsole.set(true)
    }
  }
}

tasks.register("dist") { dependsOn "jar" }

distributions {
  main {
    contents {
      into("libs") {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.name != project.tasks.jar.outputs.files.singleFile.name
        }.each { file -> exclude file.name }
      }
    }
  }
}

startScripts.dependsOn(":lwjgl3:jar")
startScripts.classpath = project.tasks.jar.outputs.files

if (enableGraalNative == "true") {
  apply from: file("nativeimage.gradle")
}
